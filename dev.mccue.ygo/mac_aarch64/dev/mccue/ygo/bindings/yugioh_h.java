// Generated by jextract

package dev.mccue.ygo.bindings;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class yugioh_h {

    yugioh_h() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }


    static {
        System.loadLibrary("ocgcore");
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.loaderLookup()
            .or(Linker.nativeLinker().defaultLookup());

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;
    private static final int __has_safe_buffers = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __has_safe_buffers 0
     * }
     */
    public static int __has_safe_buffers() {
        return __has_safe_buffers;
    }
    private static final int __DARWIN_ONLY_64_BIT_INO_T = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_ONLY_64_BIT_INO_T 1
     * }
     */
    public static int __DARWIN_ONLY_64_BIT_INO_T() {
        return __DARWIN_ONLY_64_BIT_INO_T;
    }
    private static final int __DARWIN_ONLY_UNIX_CONFORMANCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_ONLY_UNIX_CONFORMANCE 1
     * }
     */
    public static int __DARWIN_ONLY_UNIX_CONFORMANCE() {
        return __DARWIN_ONLY_UNIX_CONFORMANCE;
    }
    private static final int __DARWIN_ONLY_VERS_1050 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_ONLY_VERS_1050 1
     * }
     */
    public static int __DARWIN_ONLY_VERS_1050() {
        return __DARWIN_ONLY_VERS_1050;
    }
    private static final int __DARWIN_UNIX03 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_UNIX03 1
     * }
     */
    public static int __DARWIN_UNIX03() {
        return __DARWIN_UNIX03;
    }
    private static final int __DARWIN_64_BIT_INO_T = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_64_BIT_INO_T 1
     * }
     */
    public static int __DARWIN_64_BIT_INO_T() {
        return __DARWIN_64_BIT_INO_T;
    }
    private static final int __DARWIN_VERS_1050 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_VERS_1050 1
     * }
     */
    public static int __DARWIN_VERS_1050() {
        return __DARWIN_VERS_1050;
    }
    private static final int __DARWIN_NON_CANCELABLE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_NON_CANCELABLE 0
     * }
     */
    public static int __DARWIN_NON_CANCELABLE() {
        return __DARWIN_NON_CANCELABLE;
    }
    private static final int __STDC_WANT_LIB_EXT1__ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __STDC_WANT_LIB_EXT1__ 1
     * }
     */
    public static int __STDC_WANT_LIB_EXT1__() {
        return __STDC_WANT_LIB_EXT1__;
    }
    private static final int __DARWIN_NO_LONG_LONG = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_NO_LONG_LONG 0
     * }
     */
    public static int __DARWIN_NO_LONG_LONG() {
        return __DARWIN_NO_LONG_LONG;
    }
    private static final int _DARWIN_FEATURE_64_BIT_INODE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _DARWIN_FEATURE_64_BIT_INODE 1
     * }
     */
    public static int _DARWIN_FEATURE_64_BIT_INODE() {
        return _DARWIN_FEATURE_64_BIT_INODE;
    }
    private static final int _DARWIN_FEATURE_ONLY_64_BIT_INODE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _DARWIN_FEATURE_ONLY_64_BIT_INODE 1
     * }
     */
    public static int _DARWIN_FEATURE_ONLY_64_BIT_INODE() {
        return _DARWIN_FEATURE_ONLY_64_BIT_INODE;
    }
    private static final int _DARWIN_FEATURE_ONLY_VERS_1050 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _DARWIN_FEATURE_ONLY_VERS_1050 1
     * }
     */
    public static int _DARWIN_FEATURE_ONLY_VERS_1050() {
        return _DARWIN_FEATURE_ONLY_VERS_1050;
    }
    private static final int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE 1
     * }
     */
    public static int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE() {
        return _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE;
    }
    private static final int _DARWIN_FEATURE_UNIX_CONFORMANCE = (int)3L;
    /**
     * {@snippet lang=c :
     * #define _DARWIN_FEATURE_UNIX_CONFORMANCE 3
     * }
     */
    public static int _DARWIN_FEATURE_UNIX_CONFORMANCE() {
        return _DARWIN_FEATURE_UNIX_CONFORMANCE;
    }
    private static final int __has_ptrcheck = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __has_ptrcheck 0
     * }
     */
    public static int __has_ptrcheck() {
        return __has_ptrcheck;
    }
    private static final int __WORDSIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __WORDSIZE 64
     * }
     */
    public static int __WORDSIZE() {
        return __WORDSIZE;
    }
    private static final int USE_CLANG_TYPES = (int)0L;
    /**
     * {@snippet lang=c :
     * #define USE_CLANG_TYPES 0
     * }
     */
    public static int USE_CLANG_TYPES() {
        return USE_CLANG_TYPES;
    }
    private static final int __PTHREAD_SIZE__ = (int)8176L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_SIZE__ 8176
     * }
     */
    public static int __PTHREAD_SIZE__() {
        return __PTHREAD_SIZE__;
    }
    private static final int __PTHREAD_ATTR_SIZE__ = (int)56L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_ATTR_SIZE__ 56
     * }
     */
    public static int __PTHREAD_ATTR_SIZE__() {
        return __PTHREAD_ATTR_SIZE__;
    }
    private static final int __PTHREAD_MUTEXATTR_SIZE__ = (int)8L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_MUTEXATTR_SIZE__ 8
     * }
     */
    public static int __PTHREAD_MUTEXATTR_SIZE__() {
        return __PTHREAD_MUTEXATTR_SIZE__;
    }
    private static final int __PTHREAD_MUTEX_SIZE__ = (int)56L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_MUTEX_SIZE__ 56
     * }
     */
    public static int __PTHREAD_MUTEX_SIZE__() {
        return __PTHREAD_MUTEX_SIZE__;
    }
    private static final int __PTHREAD_CONDATTR_SIZE__ = (int)8L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_CONDATTR_SIZE__ 8
     * }
     */
    public static int __PTHREAD_CONDATTR_SIZE__() {
        return __PTHREAD_CONDATTR_SIZE__;
    }
    private static final int __PTHREAD_COND_SIZE__ = (int)40L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_COND_SIZE__ 40
     * }
     */
    public static int __PTHREAD_COND_SIZE__() {
        return __PTHREAD_COND_SIZE__;
    }
    private static final int __PTHREAD_ONCE_SIZE__ = (int)8L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_ONCE_SIZE__ 8
     * }
     */
    public static int __PTHREAD_ONCE_SIZE__() {
        return __PTHREAD_ONCE_SIZE__;
    }
    private static final int __PTHREAD_RWLOCK_SIZE__ = (int)192L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_RWLOCK_SIZE__ 192
     * }
     */
    public static int __PTHREAD_RWLOCK_SIZE__() {
        return __PTHREAD_RWLOCK_SIZE__;
    }
    private static final int __PTHREAD_RWLOCKATTR_SIZE__ = (int)16L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_RWLOCKATTR_SIZE__ 16
     * }
     */
    public static int __PTHREAD_RWLOCKATTR_SIZE__() {
        return __PTHREAD_RWLOCKATTR_SIZE__;
    }
    private static final int INT8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT8_MAX 127
     * }
     */
    public static int INT8_MAX() {
        return INT8_MAX;
    }
    private static final int INT16_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define INT16_MAX 32767
     * }
     */
    public static int INT16_MAX() {
        return INT16_MAX;
    }
    private static final int INT32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT32_MAX 2147483647
     * }
     */
    public static int INT32_MAX() {
        return INT32_MAX;
    }
    private static final int UINT8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT8_MAX 255
     * }
     */
    public static int UINT8_MAX() {
        return UINT8_MAX;
    }
    private static final int UINT16_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT16_MAX 65535
     * }
     */
    public static int UINT16_MAX() {
        return UINT16_MAX;
    }
    private static final int TRUE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define TRUE 1
     * }
     */
    public static int TRUE() {
        return TRUE;
    }
    private static final int FALSE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define FALSE 0
     * }
     */
    public static int FALSE() {
        return FALSE;
    }
    private static final int LOCATION_DECK = (int)1L;
    /**
     * {@snippet lang=c :
     * #define LOCATION_DECK 1
     * }
     */
    public static int LOCATION_DECK() {
        return LOCATION_DECK;
    }
    private static final int LOCATION_HAND = (int)2L;
    /**
     * {@snippet lang=c :
     * #define LOCATION_HAND 2
     * }
     */
    public static int LOCATION_HAND() {
        return LOCATION_HAND;
    }
    private static final int LOCATION_MZONE = (int)4L;
    /**
     * {@snippet lang=c :
     * #define LOCATION_MZONE 4
     * }
     */
    public static int LOCATION_MZONE() {
        return LOCATION_MZONE;
    }
    private static final int LOCATION_SZONE = (int)8L;
    /**
     * {@snippet lang=c :
     * #define LOCATION_SZONE 8
     * }
     */
    public static int LOCATION_SZONE() {
        return LOCATION_SZONE;
    }
    private static final int LOCATION_GRAVE = (int)16L;
    /**
     * {@snippet lang=c :
     * #define LOCATION_GRAVE 16
     * }
     */
    public static int LOCATION_GRAVE() {
        return LOCATION_GRAVE;
    }
    private static final int LOCATION_REMOVED = (int)32L;
    /**
     * {@snippet lang=c :
     * #define LOCATION_REMOVED 32
     * }
     */
    public static int LOCATION_REMOVED() {
        return LOCATION_REMOVED;
    }
    private static final int LOCATION_EXTRA = (int)64L;
    /**
     * {@snippet lang=c :
     * #define LOCATION_EXTRA 64
     * }
     */
    public static int LOCATION_EXTRA() {
        return LOCATION_EXTRA;
    }
    private static final int LOCATION_OVERLAY = (int)128L;
    /**
     * {@snippet lang=c :
     * #define LOCATION_OVERLAY 128
     * }
     */
    public static int LOCATION_OVERLAY() {
        return LOCATION_OVERLAY;
    }
    private static final int LOCATION_ONFIELD = (int)12L;
    /**
     * {@snippet lang=c :
     * #define LOCATION_ONFIELD 12
     * }
     */
    public static int LOCATION_ONFIELD() {
        return LOCATION_ONFIELD;
    }
    private static final int LOCATION_FZONE = (int)256L;
    /**
     * {@snippet lang=c :
     * #define LOCATION_FZONE 256
     * }
     */
    public static int LOCATION_FZONE() {
        return LOCATION_FZONE;
    }
    private static final int LOCATION_PZONE = (int)512L;
    /**
     * {@snippet lang=c :
     * #define LOCATION_PZONE 512
     * }
     */
    public static int LOCATION_PZONE() {
        return LOCATION_PZONE;
    }
    private static final int LOCATION_STZONE = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define LOCATION_STZONE 1024
     * }
     */
    public static int LOCATION_STZONE() {
        return LOCATION_STZONE;
    }
    private static final int LOCATION_MMZONE = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define LOCATION_MMZONE 2048
     * }
     */
    public static int LOCATION_MMZONE() {
        return LOCATION_MMZONE;
    }
    private static final int LOCATION_EMZONE = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define LOCATION_EMZONE 4096
     * }
     */
    public static int LOCATION_EMZONE() {
        return LOCATION_EMZONE;
    }
    private static final int LOCATION_DECKBOT = (int)65537L;
    /**
     * {@snippet lang=c :
     * #define LOCATION_DECKBOT 65537
     * }
     */
    public static int LOCATION_DECKBOT() {
        return LOCATION_DECKBOT;
    }
    private static final int LOCATION_DECKSHF = (int)131073L;
    /**
     * {@snippet lang=c :
     * #define LOCATION_DECKSHF 131073
     * }
     */
    public static int LOCATION_DECKSHF() {
        return LOCATION_DECKSHF;
    }
    private static final int COIN_HEADS = (int)1L;
    /**
     * {@snippet lang=c :
     * #define COIN_HEADS 1
     * }
     */
    public static int COIN_HEADS() {
        return COIN_HEADS;
    }
    private static final int COIN_TAILS = (int)0L;
    /**
     * {@snippet lang=c :
     * #define COIN_TAILS 0
     * }
     */
    public static int COIN_TAILS() {
        return COIN_TAILS;
    }
    private static final int POS_FACEUP_ATTACK = (int)1L;
    /**
     * {@snippet lang=c :
     * #define POS_FACEUP_ATTACK 1
     * }
     */
    public static int POS_FACEUP_ATTACK() {
        return POS_FACEUP_ATTACK;
    }
    private static final int POS_FACEDOWN_ATTACK = (int)2L;
    /**
     * {@snippet lang=c :
     * #define POS_FACEDOWN_ATTACK 2
     * }
     */
    public static int POS_FACEDOWN_ATTACK() {
        return POS_FACEDOWN_ATTACK;
    }
    private static final int POS_FACEUP_DEFENSE = (int)4L;
    /**
     * {@snippet lang=c :
     * #define POS_FACEUP_DEFENSE 4
     * }
     */
    public static int POS_FACEUP_DEFENSE() {
        return POS_FACEUP_DEFENSE;
    }
    private static final int POS_FACEDOWN_DEFENSE = (int)8L;
    /**
     * {@snippet lang=c :
     * #define POS_FACEDOWN_DEFENSE 8
     * }
     */
    public static int POS_FACEDOWN_DEFENSE() {
        return POS_FACEDOWN_DEFENSE;
    }
    private static final int POS_FACEUP = (int)5L;
    /**
     * {@snippet lang=c :
     * #define POS_FACEUP 5
     * }
     */
    public static int POS_FACEUP() {
        return POS_FACEUP;
    }
    private static final int POS_FACEDOWN = (int)10L;
    /**
     * {@snippet lang=c :
     * #define POS_FACEDOWN 10
     * }
     */
    public static int POS_FACEDOWN() {
        return POS_FACEDOWN;
    }
    private static final int POS_ATTACK = (int)3L;
    /**
     * {@snippet lang=c :
     * #define POS_ATTACK 3
     * }
     */
    public static int POS_ATTACK() {
        return POS_ATTACK;
    }
    private static final int POS_DEFENSE = (int)12L;
    /**
     * {@snippet lang=c :
     * #define POS_DEFENSE 12
     * }
     */
    public static int POS_DEFENSE() {
        return POS_DEFENSE;
    }
    private static final int NO_FLIP_EFFECT = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define NO_FLIP_EFFECT 65536
     * }
     */
    public static int NO_FLIP_EFFECT() {
        return NO_FLIP_EFFECT;
    }
    private static final int TYPE_MONSTER = (int)1L;
    /**
     * {@snippet lang=c :
     * #define TYPE_MONSTER 1
     * }
     */
    public static int TYPE_MONSTER() {
        return TYPE_MONSTER;
    }
    private static final int TYPE_SPELL = (int)2L;
    /**
     * {@snippet lang=c :
     * #define TYPE_SPELL 2
     * }
     */
    public static int TYPE_SPELL() {
        return TYPE_SPELL;
    }
    private static final int TYPE_TRAP = (int)4L;
    /**
     * {@snippet lang=c :
     * #define TYPE_TRAP 4
     * }
     */
    public static int TYPE_TRAP() {
        return TYPE_TRAP;
    }
    private static final int TYPE_NORMAL = (int)16L;
    /**
     * {@snippet lang=c :
     * #define TYPE_NORMAL 16
     * }
     */
    public static int TYPE_NORMAL() {
        return TYPE_NORMAL;
    }
    private static final int TYPE_EFFECT = (int)32L;
    /**
     * {@snippet lang=c :
     * #define TYPE_EFFECT 32
     * }
     */
    public static int TYPE_EFFECT() {
        return TYPE_EFFECT;
    }
    private static final int TYPE_FUSION = (int)64L;
    /**
     * {@snippet lang=c :
     * #define TYPE_FUSION 64
     * }
     */
    public static int TYPE_FUSION() {
        return TYPE_FUSION;
    }
    private static final int TYPE_RITUAL = (int)128L;
    /**
     * {@snippet lang=c :
     * #define TYPE_RITUAL 128
     * }
     */
    public static int TYPE_RITUAL() {
        return TYPE_RITUAL;
    }
    private static final int TYPE_TRAPMONSTER = (int)256L;
    /**
     * {@snippet lang=c :
     * #define TYPE_TRAPMONSTER 256
     * }
     */
    public static int TYPE_TRAPMONSTER() {
        return TYPE_TRAPMONSTER;
    }
    private static final int TYPE_SPIRIT = (int)512L;
    /**
     * {@snippet lang=c :
     * #define TYPE_SPIRIT 512
     * }
     */
    public static int TYPE_SPIRIT() {
        return TYPE_SPIRIT;
    }
    private static final int TYPE_UNION = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define TYPE_UNION 1024
     * }
     */
    public static int TYPE_UNION() {
        return TYPE_UNION;
    }
    private static final int TYPE_GEMINI = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define TYPE_GEMINI 2048
     * }
     */
    public static int TYPE_GEMINI() {
        return TYPE_GEMINI;
    }
    private static final int TYPE_TUNER = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define TYPE_TUNER 4096
     * }
     */
    public static int TYPE_TUNER() {
        return TYPE_TUNER;
    }
    private static final int TYPE_SYNCHRO = (int)8192L;
    /**
     * {@snippet lang=c :
     * #define TYPE_SYNCHRO 8192
     * }
     */
    public static int TYPE_SYNCHRO() {
        return TYPE_SYNCHRO;
    }
    private static final int TYPE_TOKEN = (int)16384L;
    /**
     * {@snippet lang=c :
     * #define TYPE_TOKEN 16384
     * }
     */
    public static int TYPE_TOKEN() {
        return TYPE_TOKEN;
    }
    private static final int TYPE_MAXIMUM = (int)32768L;
    /**
     * {@snippet lang=c :
     * #define TYPE_MAXIMUM 32768
     * }
     */
    public static int TYPE_MAXIMUM() {
        return TYPE_MAXIMUM;
    }
    private static final int TYPE_QUICKPLAY = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define TYPE_QUICKPLAY 65536
     * }
     */
    public static int TYPE_QUICKPLAY() {
        return TYPE_QUICKPLAY;
    }
    private static final int TYPE_CONTINUOUS = (int)131072L;
    /**
     * {@snippet lang=c :
     * #define TYPE_CONTINUOUS 131072
     * }
     */
    public static int TYPE_CONTINUOUS() {
        return TYPE_CONTINUOUS;
    }
    private static final int TYPE_EQUIP = (int)262144L;
    /**
     * {@snippet lang=c :
     * #define TYPE_EQUIP 262144
     * }
     */
    public static int TYPE_EQUIP() {
        return TYPE_EQUIP;
    }
    private static final int TYPE_FIELD = (int)524288L;
    /**
     * {@snippet lang=c :
     * #define TYPE_FIELD 524288
     * }
     */
    public static int TYPE_FIELD() {
        return TYPE_FIELD;
    }
    private static final int TYPE_COUNTER = (int)1048576L;
    /**
     * {@snippet lang=c :
     * #define TYPE_COUNTER 1048576
     * }
     */
    public static int TYPE_COUNTER() {
        return TYPE_COUNTER;
    }
    private static final int TYPE_FLIP = (int)2097152L;
    /**
     * {@snippet lang=c :
     * #define TYPE_FLIP 2097152
     * }
     */
    public static int TYPE_FLIP() {
        return TYPE_FLIP;
    }
    private static final int TYPE_TOON = (int)4194304L;
    /**
     * {@snippet lang=c :
     * #define TYPE_TOON 4194304
     * }
     */
    public static int TYPE_TOON() {
        return TYPE_TOON;
    }
    private static final int TYPE_XYZ = (int)8388608L;
    /**
     * {@snippet lang=c :
     * #define TYPE_XYZ 8388608
     * }
     */
    public static int TYPE_XYZ() {
        return TYPE_XYZ;
    }
    private static final int TYPE_PENDULUM = (int)16777216L;
    /**
     * {@snippet lang=c :
     * #define TYPE_PENDULUM 16777216
     * }
     */
    public static int TYPE_PENDULUM() {
        return TYPE_PENDULUM;
    }
    private static final int TYPE_SPSUMMON = (int)33554432L;
    /**
     * {@snippet lang=c :
     * #define TYPE_SPSUMMON 33554432
     * }
     */
    public static int TYPE_SPSUMMON() {
        return TYPE_SPSUMMON;
    }
    private static final int TYPE_LINK = (int)67108864L;
    /**
     * {@snippet lang=c :
     * #define TYPE_LINK 67108864
     * }
     */
    public static int TYPE_LINK() {
        return TYPE_LINK;
    }
    private static final int ATTRIBUTE_EARTH = (int)1L;
    /**
     * {@snippet lang=c :
     * #define ATTRIBUTE_EARTH 1
     * }
     */
    public static int ATTRIBUTE_EARTH() {
        return ATTRIBUTE_EARTH;
    }
    private static final int ATTRIBUTE_WATER = (int)2L;
    /**
     * {@snippet lang=c :
     * #define ATTRIBUTE_WATER 2
     * }
     */
    public static int ATTRIBUTE_WATER() {
        return ATTRIBUTE_WATER;
    }
    private static final int ATTRIBUTE_FIRE = (int)4L;
    /**
     * {@snippet lang=c :
     * #define ATTRIBUTE_FIRE 4
     * }
     */
    public static int ATTRIBUTE_FIRE() {
        return ATTRIBUTE_FIRE;
    }
    private static final int ATTRIBUTE_WIND = (int)8L;
    /**
     * {@snippet lang=c :
     * #define ATTRIBUTE_WIND 8
     * }
     */
    public static int ATTRIBUTE_WIND() {
        return ATTRIBUTE_WIND;
    }
    private static final int ATTRIBUTE_LIGHT = (int)16L;
    /**
     * {@snippet lang=c :
     * #define ATTRIBUTE_LIGHT 16
     * }
     */
    public static int ATTRIBUTE_LIGHT() {
        return ATTRIBUTE_LIGHT;
    }
    private static final int ATTRIBUTE_DARK = (int)32L;
    /**
     * {@snippet lang=c :
     * #define ATTRIBUTE_DARK 32
     * }
     */
    public static int ATTRIBUTE_DARK() {
        return ATTRIBUTE_DARK;
    }
    private static final int ATTRIBUTE_DIVINE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define ATTRIBUTE_DIVINE 64
     * }
     */
    public static int ATTRIBUTE_DIVINE() {
        return ATTRIBUTE_DIVINE;
    }
    private static final int RACE_WARRIOR = (int)1L;
    /**
     * {@snippet lang=c :
     * #define RACE_WARRIOR 1
     * }
     */
    public static int RACE_WARRIOR() {
        return RACE_WARRIOR;
    }
    private static final int RACE_SPELLCASTER = (int)2L;
    /**
     * {@snippet lang=c :
     * #define RACE_SPELLCASTER 2
     * }
     */
    public static int RACE_SPELLCASTER() {
        return RACE_SPELLCASTER;
    }
    private static final int RACE_FAIRY = (int)4L;
    /**
     * {@snippet lang=c :
     * #define RACE_FAIRY 4
     * }
     */
    public static int RACE_FAIRY() {
        return RACE_FAIRY;
    }
    private static final int RACE_FIEND = (int)8L;
    /**
     * {@snippet lang=c :
     * #define RACE_FIEND 8
     * }
     */
    public static int RACE_FIEND() {
        return RACE_FIEND;
    }
    private static final int RACE_ZOMBIE = (int)16L;
    /**
     * {@snippet lang=c :
     * #define RACE_ZOMBIE 16
     * }
     */
    public static int RACE_ZOMBIE() {
        return RACE_ZOMBIE;
    }
    private static final int RACE_MACHINE = (int)32L;
    /**
     * {@snippet lang=c :
     * #define RACE_MACHINE 32
     * }
     */
    public static int RACE_MACHINE() {
        return RACE_MACHINE;
    }
    private static final int RACE_AQUA = (int)64L;
    /**
     * {@snippet lang=c :
     * #define RACE_AQUA 64
     * }
     */
    public static int RACE_AQUA() {
        return RACE_AQUA;
    }
    private static final int RACE_PYRO = (int)128L;
    /**
     * {@snippet lang=c :
     * #define RACE_PYRO 128
     * }
     */
    public static int RACE_PYRO() {
        return RACE_PYRO;
    }
    private static final int RACE_ROCK = (int)256L;
    /**
     * {@snippet lang=c :
     * #define RACE_ROCK 256
     * }
     */
    public static int RACE_ROCK() {
        return RACE_ROCK;
    }
    private static final int RACE_WINGEDBEAST = (int)512L;
    /**
     * {@snippet lang=c :
     * #define RACE_WINGEDBEAST 512
     * }
     */
    public static int RACE_WINGEDBEAST() {
        return RACE_WINGEDBEAST;
    }
    private static final int RACE_PLANT = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define RACE_PLANT 1024
     * }
     */
    public static int RACE_PLANT() {
        return RACE_PLANT;
    }
    private static final int RACE_INSECT = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define RACE_INSECT 2048
     * }
     */
    public static int RACE_INSECT() {
        return RACE_INSECT;
    }
    private static final int RACE_THUNDER = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define RACE_THUNDER 4096
     * }
     */
    public static int RACE_THUNDER() {
        return RACE_THUNDER;
    }
    private static final int RACE_DRAGON = (int)8192L;
    /**
     * {@snippet lang=c :
     * #define RACE_DRAGON 8192
     * }
     */
    public static int RACE_DRAGON() {
        return RACE_DRAGON;
    }
    private static final int RACE_BEAST = (int)16384L;
    /**
     * {@snippet lang=c :
     * #define RACE_BEAST 16384
     * }
     */
    public static int RACE_BEAST() {
        return RACE_BEAST;
    }
    private static final int RACE_BEASTWARRIOR = (int)32768L;
    /**
     * {@snippet lang=c :
     * #define RACE_BEASTWARRIOR 32768
     * }
     */
    public static int RACE_BEASTWARRIOR() {
        return RACE_BEASTWARRIOR;
    }
    private static final int RACE_DINOSAUR = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define RACE_DINOSAUR 65536
     * }
     */
    public static int RACE_DINOSAUR() {
        return RACE_DINOSAUR;
    }
    private static final int RACE_FISH = (int)131072L;
    /**
     * {@snippet lang=c :
     * #define RACE_FISH 131072
     * }
     */
    public static int RACE_FISH() {
        return RACE_FISH;
    }
    private static final int RACE_SEASERPENT = (int)262144L;
    /**
     * {@snippet lang=c :
     * #define RACE_SEASERPENT 262144
     * }
     */
    public static int RACE_SEASERPENT() {
        return RACE_SEASERPENT;
    }
    private static final int RACE_REPTILE = (int)524288L;
    /**
     * {@snippet lang=c :
     * #define RACE_REPTILE 524288
     * }
     */
    public static int RACE_REPTILE() {
        return RACE_REPTILE;
    }
    private static final int RACE_PSYCHIC = (int)1048576L;
    /**
     * {@snippet lang=c :
     * #define RACE_PSYCHIC 1048576
     * }
     */
    public static int RACE_PSYCHIC() {
        return RACE_PSYCHIC;
    }
    private static final int RACE_DIVINE = (int)2097152L;
    /**
     * {@snippet lang=c :
     * #define RACE_DIVINE 2097152
     * }
     */
    public static int RACE_DIVINE() {
        return RACE_DIVINE;
    }
    private static final int RACE_CREATORGOD = (int)4194304L;
    /**
     * {@snippet lang=c :
     * #define RACE_CREATORGOD 4194304
     * }
     */
    public static int RACE_CREATORGOD() {
        return RACE_CREATORGOD;
    }
    private static final int RACE_WYRM = (int)8388608L;
    /**
     * {@snippet lang=c :
     * #define RACE_WYRM 8388608
     * }
     */
    public static int RACE_WYRM() {
        return RACE_WYRM;
    }
    private static final int RACE_CYBERSE = (int)16777216L;
    /**
     * {@snippet lang=c :
     * #define RACE_CYBERSE 16777216
     * }
     */
    public static int RACE_CYBERSE() {
        return RACE_CYBERSE;
    }
    private static final int RACE_ILLUSION = (int)33554432L;
    /**
     * {@snippet lang=c :
     * #define RACE_ILLUSION 33554432
     * }
     */
    public static int RACE_ILLUSION() {
        return RACE_ILLUSION;
    }
    private static final int RACE_CYBORG = (int)67108864L;
    /**
     * {@snippet lang=c :
     * #define RACE_CYBORG 67108864
     * }
     */
    public static int RACE_CYBORG() {
        return RACE_CYBORG;
    }
    private static final int RACE_MAGICALKNIGHT = (int)134217728L;
    /**
     * {@snippet lang=c :
     * #define RACE_MAGICALKNIGHT 134217728
     * }
     */
    public static int RACE_MAGICALKNIGHT() {
        return RACE_MAGICALKNIGHT;
    }
    private static final int RACE_HIGHDRAGON = (int)268435456L;
    /**
     * {@snippet lang=c :
     * #define RACE_HIGHDRAGON 268435456
     * }
     */
    public static int RACE_HIGHDRAGON() {
        return RACE_HIGHDRAGON;
    }
    private static final int RACE_OMEGAPSYCHIC = (int)536870912L;
    /**
     * {@snippet lang=c :
     * #define RACE_OMEGAPSYCHIC 536870912
     * }
     */
    public static int RACE_OMEGAPSYCHIC() {
        return RACE_OMEGAPSYCHIC;
    }
    private static final int RACE_CELESTIALWARRIOR = (int)1073741824L;
    /**
     * {@snippet lang=c :
     * #define RACE_CELESTIALWARRIOR 1073741824
     * }
     */
    public static int RACE_CELESTIALWARRIOR() {
        return RACE_CELESTIALWARRIOR;
    }
    private static final int REASON_DESTROY = (int)1L;
    /**
     * {@snippet lang=c :
     * #define REASON_DESTROY 1
     * }
     */
    public static int REASON_DESTROY() {
        return REASON_DESTROY;
    }
    private static final int REASON_RELEASE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define REASON_RELEASE 2
     * }
     */
    public static int REASON_RELEASE() {
        return REASON_RELEASE;
    }
    private static final int REASON_TEMPORARY = (int)4L;
    /**
     * {@snippet lang=c :
     * #define REASON_TEMPORARY 4
     * }
     */
    public static int REASON_TEMPORARY() {
        return REASON_TEMPORARY;
    }
    private static final int REASON_MATERIAL = (int)8L;
    /**
     * {@snippet lang=c :
     * #define REASON_MATERIAL 8
     * }
     */
    public static int REASON_MATERIAL() {
        return REASON_MATERIAL;
    }
    private static final int REASON_SUMMON = (int)16L;
    /**
     * {@snippet lang=c :
     * #define REASON_SUMMON 16
     * }
     */
    public static int REASON_SUMMON() {
        return REASON_SUMMON;
    }
    private static final int REASON_BATTLE = (int)32L;
    /**
     * {@snippet lang=c :
     * #define REASON_BATTLE 32
     * }
     */
    public static int REASON_BATTLE() {
        return REASON_BATTLE;
    }
    private static final int REASON_EFFECT = (int)64L;
    /**
     * {@snippet lang=c :
     * #define REASON_EFFECT 64
     * }
     */
    public static int REASON_EFFECT() {
        return REASON_EFFECT;
    }
    private static final int REASON_COST = (int)128L;
    /**
     * {@snippet lang=c :
     * #define REASON_COST 128
     * }
     */
    public static int REASON_COST() {
        return REASON_COST;
    }
    private static final int REASON_ADJUST = (int)256L;
    /**
     * {@snippet lang=c :
     * #define REASON_ADJUST 256
     * }
     */
    public static int REASON_ADJUST() {
        return REASON_ADJUST;
    }
    private static final int REASON_LOST_TARGET = (int)512L;
    /**
     * {@snippet lang=c :
     * #define REASON_LOST_TARGET 512
     * }
     */
    public static int REASON_LOST_TARGET() {
        return REASON_LOST_TARGET;
    }
    private static final int REASON_RULE = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define REASON_RULE 1024
     * }
     */
    public static int REASON_RULE() {
        return REASON_RULE;
    }
    private static final int REASON_SPSUMMON = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define REASON_SPSUMMON 2048
     * }
     */
    public static int REASON_SPSUMMON() {
        return REASON_SPSUMMON;
    }
    private static final int REASON_DISSUMMON = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define REASON_DISSUMMON 4096
     * }
     */
    public static int REASON_DISSUMMON() {
        return REASON_DISSUMMON;
    }
    private static final int REASON_FLIP = (int)8192L;
    /**
     * {@snippet lang=c :
     * #define REASON_FLIP 8192
     * }
     */
    public static int REASON_FLIP() {
        return REASON_FLIP;
    }
    private static final int REASON_DISCARD = (int)16384L;
    /**
     * {@snippet lang=c :
     * #define REASON_DISCARD 16384
     * }
     */
    public static int REASON_DISCARD() {
        return REASON_DISCARD;
    }
    private static final int REASON_RDAMAGE = (int)32768L;
    /**
     * {@snippet lang=c :
     * #define REASON_RDAMAGE 32768
     * }
     */
    public static int REASON_RDAMAGE() {
        return REASON_RDAMAGE;
    }
    private static final int REASON_RRECOVER = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define REASON_RRECOVER 65536
     * }
     */
    public static int REASON_RRECOVER() {
        return REASON_RRECOVER;
    }
    private static final int REASON_RETURN = (int)131072L;
    /**
     * {@snippet lang=c :
     * #define REASON_RETURN 131072
     * }
     */
    public static int REASON_RETURN() {
        return REASON_RETURN;
    }
    private static final int REASON_FUSION = (int)262144L;
    /**
     * {@snippet lang=c :
     * #define REASON_FUSION 262144
     * }
     */
    public static int REASON_FUSION() {
        return REASON_FUSION;
    }
    private static final int REASON_SYNCHRO = (int)524288L;
    /**
     * {@snippet lang=c :
     * #define REASON_SYNCHRO 524288
     * }
     */
    public static int REASON_SYNCHRO() {
        return REASON_SYNCHRO;
    }
    private static final int REASON_RITUAL = (int)1048576L;
    /**
     * {@snippet lang=c :
     * #define REASON_RITUAL 1048576
     * }
     */
    public static int REASON_RITUAL() {
        return REASON_RITUAL;
    }
    private static final int REASON_XYZ = (int)2097152L;
    /**
     * {@snippet lang=c :
     * #define REASON_XYZ 2097152
     * }
     */
    public static int REASON_XYZ() {
        return REASON_XYZ;
    }
    private static final int REASON_REPLACE = (int)16777216L;
    /**
     * {@snippet lang=c :
     * #define REASON_REPLACE 16777216
     * }
     */
    public static int REASON_REPLACE() {
        return REASON_REPLACE;
    }
    private static final int REASON_DRAW = (int)33554432L;
    /**
     * {@snippet lang=c :
     * #define REASON_DRAW 33554432
     * }
     */
    public static int REASON_DRAW() {
        return REASON_DRAW;
    }
    private static final int REASON_REDIRECT = (int)67108864L;
    /**
     * {@snippet lang=c :
     * #define REASON_REDIRECT 67108864
     * }
     */
    public static int REASON_REDIRECT() {
        return REASON_REDIRECT;
    }
    private static final int REASON_LINK = (int)268435456L;
    /**
     * {@snippet lang=c :
     * #define REASON_LINK 268435456
     * }
     */
    public static int REASON_LINK() {
        return REASON_LINK;
    }
    private static final int STATUS_DISABLED = (int)1L;
    /**
     * {@snippet lang=c :
     * #define STATUS_DISABLED 1
     * }
     */
    public static int STATUS_DISABLED() {
        return STATUS_DISABLED;
    }
    private static final int STATUS_TO_ENABLE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define STATUS_TO_ENABLE 2
     * }
     */
    public static int STATUS_TO_ENABLE() {
        return STATUS_TO_ENABLE;
    }
    private static final int STATUS_TO_DISABLE = (int)4L;
    /**
     * {@snippet lang=c :
     * #define STATUS_TO_DISABLE 4
     * }
     */
    public static int STATUS_TO_DISABLE() {
        return STATUS_TO_DISABLE;
    }
    private static final int STATUS_PROC_COMPLETE = (int)8L;
    /**
     * {@snippet lang=c :
     * #define STATUS_PROC_COMPLETE 8
     * }
     */
    public static int STATUS_PROC_COMPLETE() {
        return STATUS_PROC_COMPLETE;
    }
    private static final int STATUS_SET_TURN = (int)16L;
    /**
     * {@snippet lang=c :
     * #define STATUS_SET_TURN 16
     * }
     */
    public static int STATUS_SET_TURN() {
        return STATUS_SET_TURN;
    }
    private static final int STATUS_NO_LEVEL = (int)32L;
    /**
     * {@snippet lang=c :
     * #define STATUS_NO_LEVEL 32
     * }
     */
    public static int STATUS_NO_LEVEL() {
        return STATUS_NO_LEVEL;
    }
    private static final int STATUS_BATTLE_RESULT = (int)64L;
    /**
     * {@snippet lang=c :
     * #define STATUS_BATTLE_RESULT 64
     * }
     */
    public static int STATUS_BATTLE_RESULT() {
        return STATUS_BATTLE_RESULT;
    }
    private static final int STATUS_SPSUMMON_STEP = (int)128L;
    /**
     * {@snippet lang=c :
     * #define STATUS_SPSUMMON_STEP 128
     * }
     */
    public static int STATUS_SPSUMMON_STEP() {
        return STATUS_SPSUMMON_STEP;
    }
    private static final int STATUS_FORM_CHANGED = (int)256L;
    /**
     * {@snippet lang=c :
     * #define STATUS_FORM_CHANGED 256
     * }
     */
    public static int STATUS_FORM_CHANGED() {
        return STATUS_FORM_CHANGED;
    }
    private static final int STATUS_SUMMONING = (int)512L;
    /**
     * {@snippet lang=c :
     * #define STATUS_SUMMONING 512
     * }
     */
    public static int STATUS_SUMMONING() {
        return STATUS_SUMMONING;
    }
    private static final int STATUS_EFFECT_ENABLED = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define STATUS_EFFECT_ENABLED 1024
     * }
     */
    public static int STATUS_EFFECT_ENABLED() {
        return STATUS_EFFECT_ENABLED;
    }
    private static final int STATUS_SUMMON_TURN = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define STATUS_SUMMON_TURN 2048
     * }
     */
    public static int STATUS_SUMMON_TURN() {
        return STATUS_SUMMON_TURN;
    }
    private static final int STATUS_DESTROY_CONFIRMED = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define STATUS_DESTROY_CONFIRMED 4096
     * }
     */
    public static int STATUS_DESTROY_CONFIRMED() {
        return STATUS_DESTROY_CONFIRMED;
    }
    private static final int STATUS_LEAVE_CONFIRMED = (int)8192L;
    /**
     * {@snippet lang=c :
     * #define STATUS_LEAVE_CONFIRMED 8192
     * }
     */
    public static int STATUS_LEAVE_CONFIRMED() {
        return STATUS_LEAVE_CONFIRMED;
    }
    private static final int STATUS_BATTLE_DESTROYED = (int)16384L;
    /**
     * {@snippet lang=c :
     * #define STATUS_BATTLE_DESTROYED 16384
     * }
     */
    public static int STATUS_BATTLE_DESTROYED() {
        return STATUS_BATTLE_DESTROYED;
    }
    private static final int STATUS_COPYING_EFFECT = (int)32768L;
    /**
     * {@snippet lang=c :
     * #define STATUS_COPYING_EFFECT 32768
     * }
     */
    public static int STATUS_COPYING_EFFECT() {
        return STATUS_COPYING_EFFECT;
    }
    private static final int STATUS_CHAINING = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define STATUS_CHAINING 65536
     * }
     */
    public static int STATUS_CHAINING() {
        return STATUS_CHAINING;
    }
    private static final int STATUS_SUMMON_DISABLED = (int)131072L;
    /**
     * {@snippet lang=c :
     * #define STATUS_SUMMON_DISABLED 131072
     * }
     */
    public static int STATUS_SUMMON_DISABLED() {
        return STATUS_SUMMON_DISABLED;
    }
    private static final int STATUS_ACTIVATE_DISABLED = (int)262144L;
    /**
     * {@snippet lang=c :
     * #define STATUS_ACTIVATE_DISABLED 262144
     * }
     */
    public static int STATUS_ACTIVATE_DISABLED() {
        return STATUS_ACTIVATE_DISABLED;
    }
    private static final int STATUS_EFFECT_REPLACED = (int)524288L;
    /**
     * {@snippet lang=c :
     * #define STATUS_EFFECT_REPLACED 524288
     * }
     */
    public static int STATUS_EFFECT_REPLACED() {
        return STATUS_EFFECT_REPLACED;
    }
    private static final int STATUS_FUTURE_FUSION = (int)1048576L;
    /**
     * {@snippet lang=c :
     * #define STATUS_FUTURE_FUSION 1048576
     * }
     */
    public static int STATUS_FUTURE_FUSION() {
        return STATUS_FUTURE_FUSION;
    }
    private static final int STATUS_ATTACK_CANCELED = (int)2097152L;
    /**
     * {@snippet lang=c :
     * #define STATUS_ATTACK_CANCELED 2097152
     * }
     */
    public static int STATUS_ATTACK_CANCELED() {
        return STATUS_ATTACK_CANCELED;
    }
    private static final int STATUS_INITIALIZING = (int)4194304L;
    /**
     * {@snippet lang=c :
     * #define STATUS_INITIALIZING 4194304
     * }
     */
    public static int STATUS_INITIALIZING() {
        return STATUS_INITIALIZING;
    }
    private static final int STATUS_JUST_POS = (int)16777216L;
    /**
     * {@snippet lang=c :
     * #define STATUS_JUST_POS 16777216
     * }
     */
    public static int STATUS_JUST_POS() {
        return STATUS_JUST_POS;
    }
    private static final int STATUS_CONTINUOUS_POS = (int)33554432L;
    /**
     * {@snippet lang=c :
     * #define STATUS_CONTINUOUS_POS 33554432
     * }
     */
    public static int STATUS_CONTINUOUS_POS() {
        return STATUS_CONTINUOUS_POS;
    }
    private static final int STATUS_FORBIDDEN = (int)67108864L;
    /**
     * {@snippet lang=c :
     * #define STATUS_FORBIDDEN 67108864
     * }
     */
    public static int STATUS_FORBIDDEN() {
        return STATUS_FORBIDDEN;
    }
    private static final int STATUS_ACT_FROM_HAND = (int)134217728L;
    /**
     * {@snippet lang=c :
     * #define STATUS_ACT_FROM_HAND 134217728
     * }
     */
    public static int STATUS_ACT_FROM_HAND() {
        return STATUS_ACT_FROM_HAND;
    }
    private static final int STATUS_OPPO_BATTLE = (int)268435456L;
    /**
     * {@snippet lang=c :
     * #define STATUS_OPPO_BATTLE 268435456
     * }
     */
    public static int STATUS_OPPO_BATTLE() {
        return STATUS_OPPO_BATTLE;
    }
    private static final int STATUS_FLIP_SUMMON_TURN = (int)536870912L;
    /**
     * {@snippet lang=c :
     * #define STATUS_FLIP_SUMMON_TURN 536870912
     * }
     */
    public static int STATUS_FLIP_SUMMON_TURN() {
        return STATUS_FLIP_SUMMON_TURN;
    }
    private static final int STATUS_SPSUMMON_TURN = (int)1073741824L;
    /**
     * {@snippet lang=c :
     * #define STATUS_SPSUMMON_TURN 1073741824
     * }
     */
    public static int STATUS_SPSUMMON_TURN() {
        return STATUS_SPSUMMON_TURN;
    }
    private static final int QUERY_CODE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define QUERY_CODE 1
     * }
     */
    public static int QUERY_CODE() {
        return QUERY_CODE;
    }
    private static final int QUERY_POSITION = (int)2L;
    /**
     * {@snippet lang=c :
     * #define QUERY_POSITION 2
     * }
     */
    public static int QUERY_POSITION() {
        return QUERY_POSITION;
    }
    private static final int QUERY_ALIAS = (int)4L;
    /**
     * {@snippet lang=c :
     * #define QUERY_ALIAS 4
     * }
     */
    public static int QUERY_ALIAS() {
        return QUERY_ALIAS;
    }
    private static final int QUERY_TYPE = (int)8L;
    /**
     * {@snippet lang=c :
     * #define QUERY_TYPE 8
     * }
     */
    public static int QUERY_TYPE() {
        return QUERY_TYPE;
    }
    private static final int QUERY_LEVEL = (int)16L;
    /**
     * {@snippet lang=c :
     * #define QUERY_LEVEL 16
     * }
     */
    public static int QUERY_LEVEL() {
        return QUERY_LEVEL;
    }
    private static final int QUERY_RANK = (int)32L;
    /**
     * {@snippet lang=c :
     * #define QUERY_RANK 32
     * }
     */
    public static int QUERY_RANK() {
        return QUERY_RANK;
    }
    private static final int QUERY_ATTRIBUTE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define QUERY_ATTRIBUTE 64
     * }
     */
    public static int QUERY_ATTRIBUTE() {
        return QUERY_ATTRIBUTE;
    }
    private static final int QUERY_RACE = (int)128L;
    /**
     * {@snippet lang=c :
     * #define QUERY_RACE 128
     * }
     */
    public static int QUERY_RACE() {
        return QUERY_RACE;
    }
    private static final int QUERY_ATTACK = (int)256L;
    /**
     * {@snippet lang=c :
     * #define QUERY_ATTACK 256
     * }
     */
    public static int QUERY_ATTACK() {
        return QUERY_ATTACK;
    }
    private static final int QUERY_DEFENSE = (int)512L;
    /**
     * {@snippet lang=c :
     * #define QUERY_DEFENSE 512
     * }
     */
    public static int QUERY_DEFENSE() {
        return QUERY_DEFENSE;
    }
    private static final int QUERY_BASE_ATTACK = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define QUERY_BASE_ATTACK 1024
     * }
     */
    public static int QUERY_BASE_ATTACK() {
        return QUERY_BASE_ATTACK;
    }
    private static final int QUERY_BASE_DEFENSE = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define QUERY_BASE_DEFENSE 2048
     * }
     */
    public static int QUERY_BASE_DEFENSE() {
        return QUERY_BASE_DEFENSE;
    }
    private static final int QUERY_REASON = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define QUERY_REASON 4096
     * }
     */
    public static int QUERY_REASON() {
        return QUERY_REASON;
    }
    private static final int QUERY_REASON_CARD = (int)8192L;
    /**
     * {@snippet lang=c :
     * #define QUERY_REASON_CARD 8192
     * }
     */
    public static int QUERY_REASON_CARD() {
        return QUERY_REASON_CARD;
    }
    private static final int QUERY_EQUIP_CARD = (int)16384L;
    /**
     * {@snippet lang=c :
     * #define QUERY_EQUIP_CARD 16384
     * }
     */
    public static int QUERY_EQUIP_CARD() {
        return QUERY_EQUIP_CARD;
    }
    private static final int QUERY_TARGET_CARD = (int)32768L;
    /**
     * {@snippet lang=c :
     * #define QUERY_TARGET_CARD 32768
     * }
     */
    public static int QUERY_TARGET_CARD() {
        return QUERY_TARGET_CARD;
    }
    private static final int QUERY_OVERLAY_CARD = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define QUERY_OVERLAY_CARD 65536
     * }
     */
    public static int QUERY_OVERLAY_CARD() {
        return QUERY_OVERLAY_CARD;
    }
    private static final int QUERY_COUNTERS = (int)131072L;
    /**
     * {@snippet lang=c :
     * #define QUERY_COUNTERS 131072
     * }
     */
    public static int QUERY_COUNTERS() {
        return QUERY_COUNTERS;
    }
    private static final int QUERY_OWNER = (int)262144L;
    /**
     * {@snippet lang=c :
     * #define QUERY_OWNER 262144
     * }
     */
    public static int QUERY_OWNER() {
        return QUERY_OWNER;
    }
    private static final int QUERY_STATUS = (int)524288L;
    /**
     * {@snippet lang=c :
     * #define QUERY_STATUS 524288
     * }
     */
    public static int QUERY_STATUS() {
        return QUERY_STATUS;
    }
    private static final int QUERY_IS_PUBLIC = (int)1048576L;
    /**
     * {@snippet lang=c :
     * #define QUERY_IS_PUBLIC 1048576
     * }
     */
    public static int QUERY_IS_PUBLIC() {
        return QUERY_IS_PUBLIC;
    }
    private static final int QUERY_LSCALE = (int)2097152L;
    /**
     * {@snippet lang=c :
     * #define QUERY_LSCALE 2097152
     * }
     */
    public static int QUERY_LSCALE() {
        return QUERY_LSCALE;
    }
    private static final int QUERY_RSCALE = (int)4194304L;
    /**
     * {@snippet lang=c :
     * #define QUERY_RSCALE 4194304
     * }
     */
    public static int QUERY_RSCALE() {
        return QUERY_RSCALE;
    }
    private static final int QUERY_LINK = (int)8388608L;
    /**
     * {@snippet lang=c :
     * #define QUERY_LINK 8388608
     * }
     */
    public static int QUERY_LINK() {
        return QUERY_LINK;
    }
    private static final int QUERY_IS_HIDDEN = (int)16777216L;
    /**
     * {@snippet lang=c :
     * #define QUERY_IS_HIDDEN 16777216
     * }
     */
    public static int QUERY_IS_HIDDEN() {
        return QUERY_IS_HIDDEN;
    }
    private static final int QUERY_COVER = (int)33554432L;
    /**
     * {@snippet lang=c :
     * #define QUERY_COVER 33554432
     * }
     */
    public static int QUERY_COVER() {
        return QUERY_COVER;
    }
    private static final int LINK_MARKER_BOTTOM_LEFT = (int)1L;
    /**
     * {@snippet lang=c :
     * #define LINK_MARKER_BOTTOM_LEFT 1
     * }
     */
    public static int LINK_MARKER_BOTTOM_LEFT() {
        return LINK_MARKER_BOTTOM_LEFT;
    }
    private static final int LINK_MARKER_BOTTOM = (int)2L;
    /**
     * {@snippet lang=c :
     * #define LINK_MARKER_BOTTOM 2
     * }
     */
    public static int LINK_MARKER_BOTTOM() {
        return LINK_MARKER_BOTTOM;
    }
    private static final int LINK_MARKER_BOTTOM_RIGHT = (int)4L;
    /**
     * {@snippet lang=c :
     * #define LINK_MARKER_BOTTOM_RIGHT 4
     * }
     */
    public static int LINK_MARKER_BOTTOM_RIGHT() {
        return LINK_MARKER_BOTTOM_RIGHT;
    }
    private static final int LINK_MARKER_LEFT = (int)8L;
    /**
     * {@snippet lang=c :
     * #define LINK_MARKER_LEFT 8
     * }
     */
    public static int LINK_MARKER_LEFT() {
        return LINK_MARKER_LEFT;
    }
    private static final int LINK_MARKER_RIGHT = (int)32L;
    /**
     * {@snippet lang=c :
     * #define LINK_MARKER_RIGHT 32
     * }
     */
    public static int LINK_MARKER_RIGHT() {
        return LINK_MARKER_RIGHT;
    }
    private static final int LINK_MARKER_TOP_LEFT = (int)64L;
    /**
     * {@snippet lang=c :
     * #define LINK_MARKER_TOP_LEFT 64
     * }
     */
    public static int LINK_MARKER_TOP_LEFT() {
        return LINK_MARKER_TOP_LEFT;
    }
    private static final int LINK_MARKER_TOP = (int)128L;
    /**
     * {@snippet lang=c :
     * #define LINK_MARKER_TOP 128
     * }
     */
    public static int LINK_MARKER_TOP() {
        return LINK_MARKER_TOP;
    }
    private static final int LINK_MARKER_TOP_RIGHT = (int)256L;
    /**
     * {@snippet lang=c :
     * #define LINK_MARKER_TOP_RIGHT 256
     * }
     */
    public static int LINK_MARKER_TOP_RIGHT() {
        return LINK_MARKER_TOP_RIGHT;
    }
    private static final int MSG_RETRY = (int)1L;
    /**
     * {@snippet lang=c :
     * #define MSG_RETRY 1
     * }
     */
    public static int MSG_RETRY() {
        return MSG_RETRY;
    }
    private static final int MSG_HINT = (int)2L;
    /**
     * {@snippet lang=c :
     * #define MSG_HINT 2
     * }
     */
    public static int MSG_HINT() {
        return MSG_HINT;
    }
    private static final int MSG_WAITING = (int)3L;
    /**
     * {@snippet lang=c :
     * #define MSG_WAITING 3
     * }
     */
    public static int MSG_WAITING() {
        return MSG_WAITING;
    }
    private static final int MSG_START = (int)4L;
    /**
     * {@snippet lang=c :
     * #define MSG_START 4
     * }
     */
    public static int MSG_START() {
        return MSG_START;
    }
    private static final int MSG_WIN = (int)5L;
    /**
     * {@snippet lang=c :
     * #define MSG_WIN 5
     * }
     */
    public static int MSG_WIN() {
        return MSG_WIN;
    }
    private static final int MSG_UPDATE_DATA = (int)6L;
    /**
     * {@snippet lang=c :
     * #define MSG_UPDATE_DATA 6
     * }
     */
    public static int MSG_UPDATE_DATA() {
        return MSG_UPDATE_DATA;
    }
    private static final int MSG_UPDATE_CARD = (int)7L;
    /**
     * {@snippet lang=c :
     * #define MSG_UPDATE_CARD 7
     * }
     */
    public static int MSG_UPDATE_CARD() {
        return MSG_UPDATE_CARD;
    }
    private static final int MSG_REQUEST_DECK = (int)8L;
    /**
     * {@snippet lang=c :
     * #define MSG_REQUEST_DECK 8
     * }
     */
    public static int MSG_REQUEST_DECK() {
        return MSG_REQUEST_DECK;
    }
    private static final int MSG_SELECT_BATTLECMD = (int)10L;
    /**
     * {@snippet lang=c :
     * #define MSG_SELECT_BATTLECMD 10
     * }
     */
    public static int MSG_SELECT_BATTLECMD() {
        return MSG_SELECT_BATTLECMD;
    }
    private static final int MSG_SELECT_IDLECMD = (int)11L;
    /**
     * {@snippet lang=c :
     * #define MSG_SELECT_IDLECMD 11
     * }
     */
    public static int MSG_SELECT_IDLECMD() {
        return MSG_SELECT_IDLECMD;
    }
    private static final int MSG_SELECT_EFFECTYN = (int)12L;
    /**
     * {@snippet lang=c :
     * #define MSG_SELECT_EFFECTYN 12
     * }
     */
    public static int MSG_SELECT_EFFECTYN() {
        return MSG_SELECT_EFFECTYN;
    }
    private static final int MSG_SELECT_YESNO = (int)13L;
    /**
     * {@snippet lang=c :
     * #define MSG_SELECT_YESNO 13
     * }
     */
    public static int MSG_SELECT_YESNO() {
        return MSG_SELECT_YESNO;
    }
    private static final int MSG_SELECT_OPTION = (int)14L;
    /**
     * {@snippet lang=c :
     * #define MSG_SELECT_OPTION 14
     * }
     */
    public static int MSG_SELECT_OPTION() {
        return MSG_SELECT_OPTION;
    }
    private static final int MSG_SELECT_CARD = (int)15L;
    /**
     * {@snippet lang=c :
     * #define MSG_SELECT_CARD 15
     * }
     */
    public static int MSG_SELECT_CARD() {
        return MSG_SELECT_CARD;
    }
    private static final int MSG_SELECT_CHAIN = (int)16L;
    /**
     * {@snippet lang=c :
     * #define MSG_SELECT_CHAIN 16
     * }
     */
    public static int MSG_SELECT_CHAIN() {
        return MSG_SELECT_CHAIN;
    }
    private static final int MSG_SELECT_PLACE = (int)18L;
    /**
     * {@snippet lang=c :
     * #define MSG_SELECT_PLACE 18
     * }
     */
    public static int MSG_SELECT_PLACE() {
        return MSG_SELECT_PLACE;
    }
    private static final int MSG_SELECT_POSITION = (int)19L;
    /**
     * {@snippet lang=c :
     * #define MSG_SELECT_POSITION 19
     * }
     */
    public static int MSG_SELECT_POSITION() {
        return MSG_SELECT_POSITION;
    }
    private static final int MSG_SELECT_TRIBUTE = (int)20L;
    /**
     * {@snippet lang=c :
     * #define MSG_SELECT_TRIBUTE 20
     * }
     */
    public static int MSG_SELECT_TRIBUTE() {
        return MSG_SELECT_TRIBUTE;
    }
    private static final int MSG_SORT_CHAIN = (int)21L;
    /**
     * {@snippet lang=c :
     * #define MSG_SORT_CHAIN 21
     * }
     */
    public static int MSG_SORT_CHAIN() {
        return MSG_SORT_CHAIN;
    }
    private static final int MSG_SELECT_COUNTER = (int)22L;
    /**
     * {@snippet lang=c :
     * #define MSG_SELECT_COUNTER 22
     * }
     */
    public static int MSG_SELECT_COUNTER() {
        return MSG_SELECT_COUNTER;
    }
    private static final int MSG_SELECT_SUM = (int)23L;
    /**
     * {@snippet lang=c :
     * #define MSG_SELECT_SUM 23
     * }
     */
    public static int MSG_SELECT_SUM() {
        return MSG_SELECT_SUM;
    }
    private static final int MSG_SELECT_DISFIELD = (int)24L;
    /**
     * {@snippet lang=c :
     * #define MSG_SELECT_DISFIELD 24
     * }
     */
    public static int MSG_SELECT_DISFIELD() {
        return MSG_SELECT_DISFIELD;
    }
    private static final int MSG_SORT_CARD = (int)25L;
    /**
     * {@snippet lang=c :
     * #define MSG_SORT_CARD 25
     * }
     */
    public static int MSG_SORT_CARD() {
        return MSG_SORT_CARD;
    }
    private static final int MSG_SELECT_UNSELECT_CARD = (int)26L;
    /**
     * {@snippet lang=c :
     * #define MSG_SELECT_UNSELECT_CARD 26
     * }
     */
    public static int MSG_SELECT_UNSELECT_CARD() {
        return MSG_SELECT_UNSELECT_CARD;
    }
    private static final int MSG_CONFIRM_DECKTOP = (int)30L;
    /**
     * {@snippet lang=c :
     * #define MSG_CONFIRM_DECKTOP 30
     * }
     */
    public static int MSG_CONFIRM_DECKTOP() {
        return MSG_CONFIRM_DECKTOP;
    }
    private static final int MSG_CONFIRM_CARDS = (int)31L;
    /**
     * {@snippet lang=c :
     * #define MSG_CONFIRM_CARDS 31
     * }
     */
    public static int MSG_CONFIRM_CARDS() {
        return MSG_CONFIRM_CARDS;
    }
    private static final int MSG_SHUFFLE_DECK = (int)32L;
    /**
     * {@snippet lang=c :
     * #define MSG_SHUFFLE_DECK 32
     * }
     */
    public static int MSG_SHUFFLE_DECK() {
        return MSG_SHUFFLE_DECK;
    }
    private static final int MSG_SHUFFLE_HAND = (int)33L;
    /**
     * {@snippet lang=c :
     * #define MSG_SHUFFLE_HAND 33
     * }
     */
    public static int MSG_SHUFFLE_HAND() {
        return MSG_SHUFFLE_HAND;
    }
    private static final int MSG_REFRESH_DECK = (int)34L;
    /**
     * {@snippet lang=c :
     * #define MSG_REFRESH_DECK 34
     * }
     */
    public static int MSG_REFRESH_DECK() {
        return MSG_REFRESH_DECK;
    }
    private static final int MSG_SWAP_GRAVE_DECK = (int)35L;
    /**
     * {@snippet lang=c :
     * #define MSG_SWAP_GRAVE_DECK 35
     * }
     */
    public static int MSG_SWAP_GRAVE_DECK() {
        return MSG_SWAP_GRAVE_DECK;
    }
    private static final int MSG_SHUFFLE_SET_CARD = (int)36L;
    /**
     * {@snippet lang=c :
     * #define MSG_SHUFFLE_SET_CARD 36
     * }
     */
    public static int MSG_SHUFFLE_SET_CARD() {
        return MSG_SHUFFLE_SET_CARD;
    }
    private static final int MSG_REVERSE_DECK = (int)37L;
    /**
     * {@snippet lang=c :
     * #define MSG_REVERSE_DECK 37
     * }
     */
    public static int MSG_REVERSE_DECK() {
        return MSG_REVERSE_DECK;
    }
    private static final int MSG_DECK_TOP = (int)38L;
    /**
     * {@snippet lang=c :
     * #define MSG_DECK_TOP 38
     * }
     */
    public static int MSG_DECK_TOP() {
        return MSG_DECK_TOP;
    }
    private static final int MSG_SHUFFLE_EXTRA = (int)39L;
    /**
     * {@snippet lang=c :
     * #define MSG_SHUFFLE_EXTRA 39
     * }
     */
    public static int MSG_SHUFFLE_EXTRA() {
        return MSG_SHUFFLE_EXTRA;
    }
    private static final int MSG_NEW_TURN = (int)40L;
    /**
     * {@snippet lang=c :
     * #define MSG_NEW_TURN 40
     * }
     */
    public static int MSG_NEW_TURN() {
        return MSG_NEW_TURN;
    }
    private static final int MSG_NEW_PHASE = (int)41L;
    /**
     * {@snippet lang=c :
     * #define MSG_NEW_PHASE 41
     * }
     */
    public static int MSG_NEW_PHASE() {
        return MSG_NEW_PHASE;
    }
    private static final int MSG_CONFIRM_EXTRATOP = (int)42L;
    /**
     * {@snippet lang=c :
     * #define MSG_CONFIRM_EXTRATOP 42
     * }
     */
    public static int MSG_CONFIRM_EXTRATOP() {
        return MSG_CONFIRM_EXTRATOP;
    }
    private static final int MSG_MOVE = (int)50L;
    /**
     * {@snippet lang=c :
     * #define MSG_MOVE 50
     * }
     */
    public static int MSG_MOVE() {
        return MSG_MOVE;
    }
    private static final int MSG_POS_CHANGE = (int)53L;
    /**
     * {@snippet lang=c :
     * #define MSG_POS_CHANGE 53
     * }
     */
    public static int MSG_POS_CHANGE() {
        return MSG_POS_CHANGE;
    }
    private static final int MSG_SET = (int)54L;
    /**
     * {@snippet lang=c :
     * #define MSG_SET 54
     * }
     */
    public static int MSG_SET() {
        return MSG_SET;
    }
    private static final int MSG_SWAP = (int)55L;
    /**
     * {@snippet lang=c :
     * #define MSG_SWAP 55
     * }
     */
    public static int MSG_SWAP() {
        return MSG_SWAP;
    }
    private static final int MSG_FIELD_DISABLED = (int)56L;
    /**
     * {@snippet lang=c :
     * #define MSG_FIELD_DISABLED 56
     * }
     */
    public static int MSG_FIELD_DISABLED() {
        return MSG_FIELD_DISABLED;
    }
    private static final int MSG_SUMMONING = (int)60L;
    /**
     * {@snippet lang=c :
     * #define MSG_SUMMONING 60
     * }
     */
    public static int MSG_SUMMONING() {
        return MSG_SUMMONING;
    }
    private static final int MSG_SUMMONED = (int)61L;
    /**
     * {@snippet lang=c :
     * #define MSG_SUMMONED 61
     * }
     */
    public static int MSG_SUMMONED() {
        return MSG_SUMMONED;
    }
    private static final int MSG_SPSUMMONING = (int)62L;
    /**
     * {@snippet lang=c :
     * #define MSG_SPSUMMONING 62
     * }
     */
    public static int MSG_SPSUMMONING() {
        return MSG_SPSUMMONING;
    }
    private static final int MSG_SPSUMMONED = (int)63L;
    /**
     * {@snippet lang=c :
     * #define MSG_SPSUMMONED 63
     * }
     */
    public static int MSG_SPSUMMONED() {
        return MSG_SPSUMMONED;
    }
    private static final int MSG_FLIPSUMMONING = (int)64L;
    /**
     * {@snippet lang=c :
     * #define MSG_FLIPSUMMONING 64
     * }
     */
    public static int MSG_FLIPSUMMONING() {
        return MSG_FLIPSUMMONING;
    }
    private static final int MSG_FLIPSUMMONED = (int)65L;
    /**
     * {@snippet lang=c :
     * #define MSG_FLIPSUMMONED 65
     * }
     */
    public static int MSG_FLIPSUMMONED() {
        return MSG_FLIPSUMMONED;
    }
    private static final int MSG_CHAINING = (int)70L;
    /**
     * {@snippet lang=c :
     * #define MSG_CHAINING 70
     * }
     */
    public static int MSG_CHAINING() {
        return MSG_CHAINING;
    }
    private static final int MSG_CHAINED = (int)71L;
    /**
     * {@snippet lang=c :
     * #define MSG_CHAINED 71
     * }
     */
    public static int MSG_CHAINED() {
        return MSG_CHAINED;
    }
    private static final int MSG_CHAIN_SOLVING = (int)72L;
    /**
     * {@snippet lang=c :
     * #define MSG_CHAIN_SOLVING 72
     * }
     */
    public static int MSG_CHAIN_SOLVING() {
        return MSG_CHAIN_SOLVING;
    }
    private static final int MSG_CHAIN_SOLVED = (int)73L;
    /**
     * {@snippet lang=c :
     * #define MSG_CHAIN_SOLVED 73
     * }
     */
    public static int MSG_CHAIN_SOLVED() {
        return MSG_CHAIN_SOLVED;
    }
    private static final int MSG_CHAIN_END = (int)74L;
    /**
     * {@snippet lang=c :
     * #define MSG_CHAIN_END 74
     * }
     */
    public static int MSG_CHAIN_END() {
        return MSG_CHAIN_END;
    }
    private static final int MSG_CHAIN_NEGATED = (int)75L;
    /**
     * {@snippet lang=c :
     * #define MSG_CHAIN_NEGATED 75
     * }
     */
    public static int MSG_CHAIN_NEGATED() {
        return MSG_CHAIN_NEGATED;
    }
    private static final int MSG_CHAIN_DISABLED = (int)76L;
    /**
     * {@snippet lang=c :
     * #define MSG_CHAIN_DISABLED 76
     * }
     */
    public static int MSG_CHAIN_DISABLED() {
        return MSG_CHAIN_DISABLED;
    }
    private static final int MSG_CARD_SELECTED = (int)80L;
    /**
     * {@snippet lang=c :
     * #define MSG_CARD_SELECTED 80
     * }
     */
    public static int MSG_CARD_SELECTED() {
        return MSG_CARD_SELECTED;
    }
    private static final int MSG_RANDOM_SELECTED = (int)81L;
    /**
     * {@snippet lang=c :
     * #define MSG_RANDOM_SELECTED 81
     * }
     */
    public static int MSG_RANDOM_SELECTED() {
        return MSG_RANDOM_SELECTED;
    }
    private static final int MSG_BECOME_TARGET = (int)83L;
    /**
     * {@snippet lang=c :
     * #define MSG_BECOME_TARGET 83
     * }
     */
    public static int MSG_BECOME_TARGET() {
        return MSG_BECOME_TARGET;
    }
    private static final int MSG_DRAW = (int)90L;
    /**
     * {@snippet lang=c :
     * #define MSG_DRAW 90
     * }
     */
    public static int MSG_DRAW() {
        return MSG_DRAW;
    }
    private static final int MSG_DAMAGE = (int)91L;
    /**
     * {@snippet lang=c :
     * #define MSG_DAMAGE 91
     * }
     */
    public static int MSG_DAMAGE() {
        return MSG_DAMAGE;
    }
    private static final int MSG_RECOVER = (int)92L;
    /**
     * {@snippet lang=c :
     * #define MSG_RECOVER 92
     * }
     */
    public static int MSG_RECOVER() {
        return MSG_RECOVER;
    }
    private static final int MSG_EQUIP = (int)93L;
    /**
     * {@snippet lang=c :
     * #define MSG_EQUIP 93
     * }
     */
    public static int MSG_EQUIP() {
        return MSG_EQUIP;
    }
    private static final int MSG_LPUPDATE = (int)94L;
    /**
     * {@snippet lang=c :
     * #define MSG_LPUPDATE 94
     * }
     */
    public static int MSG_LPUPDATE() {
        return MSG_LPUPDATE;
    }
    private static final int MSG_UNEQUIP = (int)95L;
    /**
     * {@snippet lang=c :
     * #define MSG_UNEQUIP 95
     * }
     */
    public static int MSG_UNEQUIP() {
        return MSG_UNEQUIP;
    }
    private static final int MSG_CARD_TARGET = (int)96L;
    /**
     * {@snippet lang=c :
     * #define MSG_CARD_TARGET 96
     * }
     */
    public static int MSG_CARD_TARGET() {
        return MSG_CARD_TARGET;
    }
    private static final int MSG_CANCEL_TARGET = (int)97L;
    /**
     * {@snippet lang=c :
     * #define MSG_CANCEL_TARGET 97
     * }
     */
    public static int MSG_CANCEL_TARGET() {
        return MSG_CANCEL_TARGET;
    }
    private static final int MSG_PAY_LPCOST = (int)100L;
    /**
     * {@snippet lang=c :
     * #define MSG_PAY_LPCOST 100
     * }
     */
    public static int MSG_PAY_LPCOST() {
        return MSG_PAY_LPCOST;
    }
    private static final int MSG_ADD_COUNTER = (int)101L;
    /**
     * {@snippet lang=c :
     * #define MSG_ADD_COUNTER 101
     * }
     */
    public static int MSG_ADD_COUNTER() {
        return MSG_ADD_COUNTER;
    }
    private static final int MSG_REMOVE_COUNTER = (int)102L;
    /**
     * {@snippet lang=c :
     * #define MSG_REMOVE_COUNTER 102
     * }
     */
    public static int MSG_REMOVE_COUNTER() {
        return MSG_REMOVE_COUNTER;
    }
    private static final int MSG_ATTACK = (int)110L;
    /**
     * {@snippet lang=c :
     * #define MSG_ATTACK 110
     * }
     */
    public static int MSG_ATTACK() {
        return MSG_ATTACK;
    }
    private static final int MSG_BATTLE = (int)111L;
    /**
     * {@snippet lang=c :
     * #define MSG_BATTLE 111
     * }
     */
    public static int MSG_BATTLE() {
        return MSG_BATTLE;
    }
    private static final int MSG_ATTACK_DISABLED = (int)112L;
    /**
     * {@snippet lang=c :
     * #define MSG_ATTACK_DISABLED 112
     * }
     */
    public static int MSG_ATTACK_DISABLED() {
        return MSG_ATTACK_DISABLED;
    }
    private static final int MSG_DAMAGE_STEP_START = (int)113L;
    /**
     * {@snippet lang=c :
     * #define MSG_DAMAGE_STEP_START 113
     * }
     */
    public static int MSG_DAMAGE_STEP_START() {
        return MSG_DAMAGE_STEP_START;
    }
    private static final int MSG_DAMAGE_STEP_END = (int)114L;
    /**
     * {@snippet lang=c :
     * #define MSG_DAMAGE_STEP_END 114
     * }
     */
    public static int MSG_DAMAGE_STEP_END() {
        return MSG_DAMAGE_STEP_END;
    }
    private static final int MSG_MISSED_EFFECT = (int)120L;
    /**
     * {@snippet lang=c :
     * #define MSG_MISSED_EFFECT 120
     * }
     */
    public static int MSG_MISSED_EFFECT() {
        return MSG_MISSED_EFFECT;
    }
    private static final int MSG_BE_CHAIN_TARGET = (int)121L;
    /**
     * {@snippet lang=c :
     * #define MSG_BE_CHAIN_TARGET 121
     * }
     */
    public static int MSG_BE_CHAIN_TARGET() {
        return MSG_BE_CHAIN_TARGET;
    }
    private static final int MSG_CREATE_RELATION = (int)122L;
    /**
     * {@snippet lang=c :
     * #define MSG_CREATE_RELATION 122
     * }
     */
    public static int MSG_CREATE_RELATION() {
        return MSG_CREATE_RELATION;
    }
    private static final int MSG_RELEASE_RELATION = (int)123L;
    /**
     * {@snippet lang=c :
     * #define MSG_RELEASE_RELATION 123
     * }
     */
    public static int MSG_RELEASE_RELATION() {
        return MSG_RELEASE_RELATION;
    }
    private static final int MSG_TOSS_COIN = (int)130L;
    /**
     * {@snippet lang=c :
     * #define MSG_TOSS_COIN 130
     * }
     */
    public static int MSG_TOSS_COIN() {
        return MSG_TOSS_COIN;
    }
    private static final int MSG_TOSS_DICE = (int)131L;
    /**
     * {@snippet lang=c :
     * #define MSG_TOSS_DICE 131
     * }
     */
    public static int MSG_TOSS_DICE() {
        return MSG_TOSS_DICE;
    }
    private static final int MSG_ROCK_PAPER_SCISSORS = (int)132L;
    /**
     * {@snippet lang=c :
     * #define MSG_ROCK_PAPER_SCISSORS 132
     * }
     */
    public static int MSG_ROCK_PAPER_SCISSORS() {
        return MSG_ROCK_PAPER_SCISSORS;
    }
    private static final int MSG_HAND_RES = (int)133L;
    /**
     * {@snippet lang=c :
     * #define MSG_HAND_RES 133
     * }
     */
    public static int MSG_HAND_RES() {
        return MSG_HAND_RES;
    }
    private static final int MSG_ANNOUNCE_RACE = (int)140L;
    /**
     * {@snippet lang=c :
     * #define MSG_ANNOUNCE_RACE 140
     * }
     */
    public static int MSG_ANNOUNCE_RACE() {
        return MSG_ANNOUNCE_RACE;
    }
    private static final int MSG_ANNOUNCE_ATTRIB = (int)141L;
    /**
     * {@snippet lang=c :
     * #define MSG_ANNOUNCE_ATTRIB 141
     * }
     */
    public static int MSG_ANNOUNCE_ATTRIB() {
        return MSG_ANNOUNCE_ATTRIB;
    }
    private static final int MSG_ANNOUNCE_CARD = (int)142L;
    /**
     * {@snippet lang=c :
     * #define MSG_ANNOUNCE_CARD 142
     * }
     */
    public static int MSG_ANNOUNCE_CARD() {
        return MSG_ANNOUNCE_CARD;
    }
    private static final int MSG_ANNOUNCE_NUMBER = (int)143L;
    /**
     * {@snippet lang=c :
     * #define MSG_ANNOUNCE_NUMBER 143
     * }
     */
    public static int MSG_ANNOUNCE_NUMBER() {
        return MSG_ANNOUNCE_NUMBER;
    }
    private static final int MSG_CARD_HINT = (int)160L;
    /**
     * {@snippet lang=c :
     * #define MSG_CARD_HINT 160
     * }
     */
    public static int MSG_CARD_HINT() {
        return MSG_CARD_HINT;
    }
    private static final int MSG_TAG_SWAP = (int)161L;
    /**
     * {@snippet lang=c :
     * #define MSG_TAG_SWAP 161
     * }
     */
    public static int MSG_TAG_SWAP() {
        return MSG_TAG_SWAP;
    }
    private static final int MSG_RELOAD_FIELD = (int)162L;
    /**
     * {@snippet lang=c :
     * #define MSG_RELOAD_FIELD 162
     * }
     */
    public static int MSG_RELOAD_FIELD() {
        return MSG_RELOAD_FIELD;
    }
    private static final int MSG_AI_NAME = (int)163L;
    /**
     * {@snippet lang=c :
     * #define MSG_AI_NAME 163
     * }
     */
    public static int MSG_AI_NAME() {
        return MSG_AI_NAME;
    }
    private static final int MSG_SHOW_HINT = (int)164L;
    /**
     * {@snippet lang=c :
     * #define MSG_SHOW_HINT 164
     * }
     */
    public static int MSG_SHOW_HINT() {
        return MSG_SHOW_HINT;
    }
    private static final int MSG_PLAYER_HINT = (int)165L;
    /**
     * {@snippet lang=c :
     * #define MSG_PLAYER_HINT 165
     * }
     */
    public static int MSG_PLAYER_HINT() {
        return MSG_PLAYER_HINT;
    }
    private static final int MSG_MATCH_KILL = (int)170L;
    /**
     * {@snippet lang=c :
     * #define MSG_MATCH_KILL 170
     * }
     */
    public static int MSG_MATCH_KILL() {
        return MSG_MATCH_KILL;
    }
    private static final int MSG_CUSTOM_MSG = (int)180L;
    /**
     * {@snippet lang=c :
     * #define MSG_CUSTOM_MSG 180
     * }
     */
    public static int MSG_CUSTOM_MSG() {
        return MSG_CUSTOM_MSG;
    }
    private static final int MSG_REMOVE_CARDS = (int)190L;
    /**
     * {@snippet lang=c :
     * #define MSG_REMOVE_CARDS 190
     * }
     */
    public static int MSG_REMOVE_CARDS() {
        return MSG_REMOVE_CARDS;
    }
    private static final int OLD_REPLAY_MODE = (int)231L;
    /**
     * {@snippet lang=c :
     * #define OLD_REPLAY_MODE 231
     * }
     */
    public static int OLD_REPLAY_MODE() {
        return OLD_REPLAY_MODE;
    }
    private static final int HINT_EVENT = (int)1L;
    /**
     * {@snippet lang=c :
     * #define HINT_EVENT 1
     * }
     */
    public static int HINT_EVENT() {
        return HINT_EVENT;
    }
    private static final int HINT_MESSAGE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define HINT_MESSAGE 2
     * }
     */
    public static int HINT_MESSAGE() {
        return HINT_MESSAGE;
    }
    private static final int HINT_SELECTMSG = (int)3L;
    /**
     * {@snippet lang=c :
     * #define HINT_SELECTMSG 3
     * }
     */
    public static int HINT_SELECTMSG() {
        return HINT_SELECTMSG;
    }
    private static final int HINT_OPSELECTED = (int)4L;
    /**
     * {@snippet lang=c :
     * #define HINT_OPSELECTED 4
     * }
     */
    public static int HINT_OPSELECTED() {
        return HINT_OPSELECTED;
    }
    private static final int HINT_EFFECT = (int)5L;
    /**
     * {@snippet lang=c :
     * #define HINT_EFFECT 5
     * }
     */
    public static int HINT_EFFECT() {
        return HINT_EFFECT;
    }
    private static final int HINT_RACE = (int)6L;
    /**
     * {@snippet lang=c :
     * #define HINT_RACE 6
     * }
     */
    public static int HINT_RACE() {
        return HINT_RACE;
    }
    private static final int HINT_ATTRIB = (int)7L;
    /**
     * {@snippet lang=c :
     * #define HINT_ATTRIB 7
     * }
     */
    public static int HINT_ATTRIB() {
        return HINT_ATTRIB;
    }
    private static final int HINT_CODE = (int)8L;
    /**
     * {@snippet lang=c :
     * #define HINT_CODE 8
     * }
     */
    public static int HINT_CODE() {
        return HINT_CODE;
    }
    private static final int HINT_NUMBER = (int)9L;
    /**
     * {@snippet lang=c :
     * #define HINT_NUMBER 9
     * }
     */
    public static int HINT_NUMBER() {
        return HINT_NUMBER;
    }
    private static final int HINT_CARD = (int)10L;
    /**
     * {@snippet lang=c :
     * #define HINT_CARD 10
     * }
     */
    public static int HINT_CARD() {
        return HINT_CARD;
    }
    private static final int HINT_ZONE = (int)11L;
    /**
     * {@snippet lang=c :
     * #define HINT_ZONE 11
     * }
     */
    public static int HINT_ZONE() {
        return HINT_ZONE;
    }
    private static final int CHINT_TURN = (int)1L;
    /**
     * {@snippet lang=c :
     * #define CHINT_TURN 1
     * }
     */
    public static int CHINT_TURN() {
        return CHINT_TURN;
    }
    private static final int CHINT_CARD = (int)2L;
    /**
     * {@snippet lang=c :
     * #define CHINT_CARD 2
     * }
     */
    public static int CHINT_CARD() {
        return CHINT_CARD;
    }
    private static final int CHINT_RACE = (int)3L;
    /**
     * {@snippet lang=c :
     * #define CHINT_RACE 3
     * }
     */
    public static int CHINT_RACE() {
        return CHINT_RACE;
    }
    private static final int CHINT_ATTRIBUTE = (int)4L;
    /**
     * {@snippet lang=c :
     * #define CHINT_ATTRIBUTE 4
     * }
     */
    public static int CHINT_ATTRIBUTE() {
        return CHINT_ATTRIBUTE;
    }
    private static final int CHINT_NUMBER = (int)5L;
    /**
     * {@snippet lang=c :
     * #define CHINT_NUMBER 5
     * }
     */
    public static int CHINT_NUMBER() {
        return CHINT_NUMBER;
    }
    private static final int CHINT_DESC_ADD = (int)6L;
    /**
     * {@snippet lang=c :
     * #define CHINT_DESC_ADD 6
     * }
     */
    public static int CHINT_DESC_ADD() {
        return CHINT_DESC_ADD;
    }
    private static final int CHINT_DESC_REMOVE = (int)7L;
    /**
     * {@snippet lang=c :
     * #define CHINT_DESC_REMOVE 7
     * }
     */
    public static int CHINT_DESC_REMOVE() {
        return CHINT_DESC_REMOVE;
    }
    private static final int PHINT_DESC_ADD = (int)6L;
    /**
     * {@snippet lang=c :
     * #define PHINT_DESC_ADD 6
     * }
     */
    public static int PHINT_DESC_ADD() {
        return PHINT_DESC_ADD;
    }
    private static final int PHINT_DESC_REMOVE = (int)7L;
    /**
     * {@snippet lang=c :
     * #define PHINT_DESC_REMOVE 7
     * }
     */
    public static int PHINT_DESC_REMOVE() {
        return PHINT_DESC_REMOVE;
    }
    private static final int EFFECT_CLIENT_MODE_NORMAL = (int)0L;
    /**
     * {@snippet lang=c :
     * #define EFFECT_CLIENT_MODE_NORMAL 0
     * }
     */
    public static int EFFECT_CLIENT_MODE_NORMAL() {
        return EFFECT_CLIENT_MODE_NORMAL;
    }
    private static final int EFFECT_CLIENT_MODE_RESOLVE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define EFFECT_CLIENT_MODE_RESOLVE 1
     * }
     */
    public static int EFFECT_CLIENT_MODE_RESOLVE() {
        return EFFECT_CLIENT_MODE_RESOLVE;
    }
    private static final int EFFECT_CLIENT_MODE_RESET = (int)2L;
    /**
     * {@snippet lang=c :
     * #define EFFECT_CLIENT_MODE_RESET 2
     * }
     */
    public static int EFFECT_CLIENT_MODE_RESET() {
        return EFFECT_CLIENT_MODE_RESET;
    }
    private static final int PLAYER_NONE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define PLAYER_NONE 2
     * }
     */
    public static int PLAYER_NONE() {
        return PLAYER_NONE;
    }
    private static final int PLAYER_ALL = (int)3L;
    /**
     * {@snippet lang=c :
     * #define PLAYER_ALL 3
     * }
     */
    public static int PLAYER_ALL() {
        return PLAYER_ALL;
    }
    private static final int PLAYER_SELFDES = (int)5L;
    /**
     * {@snippet lang=c :
     * #define PLAYER_SELFDES 5
     * }
     */
    public static int PLAYER_SELFDES() {
        return PLAYER_SELFDES;
    }
    private static final int PHASE_DRAW = (int)1L;
    /**
     * {@snippet lang=c :
     * #define PHASE_DRAW 1
     * }
     */
    public static int PHASE_DRAW() {
        return PHASE_DRAW;
    }
    private static final int PHASE_STANDBY = (int)2L;
    /**
     * {@snippet lang=c :
     * #define PHASE_STANDBY 2
     * }
     */
    public static int PHASE_STANDBY() {
        return PHASE_STANDBY;
    }
    private static final int PHASE_MAIN1 = (int)4L;
    /**
     * {@snippet lang=c :
     * #define PHASE_MAIN1 4
     * }
     */
    public static int PHASE_MAIN1() {
        return PHASE_MAIN1;
    }
    private static final int PHASE_BATTLE_START = (int)8L;
    /**
     * {@snippet lang=c :
     * #define PHASE_BATTLE_START 8
     * }
     */
    public static int PHASE_BATTLE_START() {
        return PHASE_BATTLE_START;
    }
    private static final int PHASE_BATTLE_STEP = (int)16L;
    /**
     * {@snippet lang=c :
     * #define PHASE_BATTLE_STEP 16
     * }
     */
    public static int PHASE_BATTLE_STEP() {
        return PHASE_BATTLE_STEP;
    }
    private static final int PHASE_DAMAGE = (int)32L;
    /**
     * {@snippet lang=c :
     * #define PHASE_DAMAGE 32
     * }
     */
    public static int PHASE_DAMAGE() {
        return PHASE_DAMAGE;
    }
    private static final int PHASE_DAMAGE_CAL = (int)64L;
    /**
     * {@snippet lang=c :
     * #define PHASE_DAMAGE_CAL 64
     * }
     */
    public static int PHASE_DAMAGE_CAL() {
        return PHASE_DAMAGE_CAL;
    }
    private static final int PHASE_BATTLE = (int)128L;
    /**
     * {@snippet lang=c :
     * #define PHASE_BATTLE 128
     * }
     */
    public static int PHASE_BATTLE() {
        return PHASE_BATTLE;
    }
    private static final int PHASE_MAIN2 = (int)256L;
    /**
     * {@snippet lang=c :
     * #define PHASE_MAIN2 256
     * }
     */
    public static int PHASE_MAIN2() {
        return PHASE_MAIN2;
    }
    private static final int PHASE_END = (int)512L;
    /**
     * {@snippet lang=c :
     * #define PHASE_END 512
     * }
     */
    public static int PHASE_END() {
        return PHASE_END;
    }
    private static final int DUEL_TEST_MODE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define DUEL_TEST_MODE 1
     * }
     */
    public static int DUEL_TEST_MODE() {
        return DUEL_TEST_MODE;
    }
    private static final int DUEL_ATTACK_FIRST_TURN = (int)2L;
    /**
     * {@snippet lang=c :
     * #define DUEL_ATTACK_FIRST_TURN 2
     * }
     */
    public static int DUEL_ATTACK_FIRST_TURN() {
        return DUEL_ATTACK_FIRST_TURN;
    }
    private static final int DUEL_USE_TRAPS_IN_NEW_CHAIN = (int)4L;
    /**
     * {@snippet lang=c :
     * #define DUEL_USE_TRAPS_IN_NEW_CHAIN 4
     * }
     */
    public static int DUEL_USE_TRAPS_IN_NEW_CHAIN() {
        return DUEL_USE_TRAPS_IN_NEW_CHAIN;
    }
    private static final int DUEL_6_STEP_BATLLE_STEP = (int)8L;
    /**
     * {@snippet lang=c :
     * #define DUEL_6_STEP_BATLLE_STEP 8
     * }
     */
    public static int DUEL_6_STEP_BATLLE_STEP() {
        return DUEL_6_STEP_BATLLE_STEP;
    }
    private static final int DUEL_PSEUDO_SHUFFLE = (int)16L;
    /**
     * {@snippet lang=c :
     * #define DUEL_PSEUDO_SHUFFLE 16
     * }
     */
    public static int DUEL_PSEUDO_SHUFFLE() {
        return DUEL_PSEUDO_SHUFFLE;
    }
    private static final int DUEL_TRIGGER_WHEN_PRIVATE_KNOWLEDGE = (int)32L;
    /**
     * {@snippet lang=c :
     * #define DUEL_TRIGGER_WHEN_PRIVATE_KNOWLEDGE 32
     * }
     */
    public static int DUEL_TRIGGER_WHEN_PRIVATE_KNOWLEDGE() {
        return DUEL_TRIGGER_WHEN_PRIVATE_KNOWLEDGE;
    }
    private static final int DUEL_SIMPLE_AI = (int)64L;
    /**
     * {@snippet lang=c :
     * #define DUEL_SIMPLE_AI 64
     * }
     */
    public static int DUEL_SIMPLE_AI() {
        return DUEL_SIMPLE_AI;
    }
    private static final int DUEL_RELAY = (int)128L;
    /**
     * {@snippet lang=c :
     * #define DUEL_RELAY 128
     * }
     */
    public static int DUEL_RELAY() {
        return DUEL_RELAY;
    }
    private static final int DUEL_OCG_OBSOLETE_IGNITION = (int)256L;
    /**
     * {@snippet lang=c :
     * #define DUEL_OCG_OBSOLETE_IGNITION 256
     * }
     */
    public static int DUEL_OCG_OBSOLETE_IGNITION() {
        return DUEL_OCG_OBSOLETE_IGNITION;
    }
    private static final int DUEL_1ST_TURN_DRAW = (int)512L;
    /**
     * {@snippet lang=c :
     * #define DUEL_1ST_TURN_DRAW 512
     * }
     */
    public static int DUEL_1ST_TURN_DRAW() {
        return DUEL_1ST_TURN_DRAW;
    }
    private static final int DUEL_1_FACEUP_FIELD = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define DUEL_1_FACEUP_FIELD 1024
     * }
     */
    public static int DUEL_1_FACEUP_FIELD() {
        return DUEL_1_FACEUP_FIELD;
    }
    private static final int DUEL_PZONE = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define DUEL_PZONE 2048
     * }
     */
    public static int DUEL_PZONE() {
        return DUEL_PZONE;
    }
    private static final int DUEL_SEPARATE_PZONE = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define DUEL_SEPARATE_PZONE 4096
     * }
     */
    public static int DUEL_SEPARATE_PZONE() {
        return DUEL_SEPARATE_PZONE;
    }
    private static final int DUEL_EMZONE = (int)8192L;
    /**
     * {@snippet lang=c :
     * #define DUEL_EMZONE 8192
     * }
     */
    public static int DUEL_EMZONE() {
        return DUEL_EMZONE;
    }
    private static final int DUEL_FSX_MMZONE = (int)16384L;
    /**
     * {@snippet lang=c :
     * #define DUEL_FSX_MMZONE 16384
     * }
     */
    public static int DUEL_FSX_MMZONE() {
        return DUEL_FSX_MMZONE;
    }
    private static final int DUEL_TRAP_MONSTERS_NOT_USE_ZONE = (int)32768L;
    /**
     * {@snippet lang=c :
     * #define DUEL_TRAP_MONSTERS_NOT_USE_ZONE 32768
     * }
     */
    public static int DUEL_TRAP_MONSTERS_NOT_USE_ZONE() {
        return DUEL_TRAP_MONSTERS_NOT_USE_ZONE;
    }
    private static final int DUEL_RETURN_TO_DECK_TRIGGERS = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define DUEL_RETURN_TO_DECK_TRIGGERS 65536
     * }
     */
    public static int DUEL_RETURN_TO_DECK_TRIGGERS() {
        return DUEL_RETURN_TO_DECK_TRIGGERS;
    }
    private static final int DUEL_TRIGGER_ONLY_IN_LOCATION = (int)131072L;
    /**
     * {@snippet lang=c :
     * #define DUEL_TRIGGER_ONLY_IN_LOCATION 131072
     * }
     */
    public static int DUEL_TRIGGER_ONLY_IN_LOCATION() {
        return DUEL_TRIGGER_ONLY_IN_LOCATION;
    }
    private static final int DUEL_SPSUMMON_ONCE_OLD_NEGATE = (int)262144L;
    /**
     * {@snippet lang=c :
     * #define DUEL_SPSUMMON_ONCE_OLD_NEGATE 262144
     * }
     */
    public static int DUEL_SPSUMMON_ONCE_OLD_NEGATE() {
        return DUEL_SPSUMMON_ONCE_OLD_NEGATE;
    }
    private static final int DUEL_CANNOT_SUMMON_OATH_OLD = (int)524288L;
    /**
     * {@snippet lang=c :
     * #define DUEL_CANNOT_SUMMON_OATH_OLD 524288
     * }
     */
    public static int DUEL_CANNOT_SUMMON_OATH_OLD() {
        return DUEL_CANNOT_SUMMON_OATH_OLD;
    }
    private static final int DUEL_NO_STANDBY_PHASE = (int)1048576L;
    /**
     * {@snippet lang=c :
     * #define DUEL_NO_STANDBY_PHASE 1048576
     * }
     */
    public static int DUEL_NO_STANDBY_PHASE() {
        return DUEL_NO_STANDBY_PHASE;
    }
    private static final int DUEL_NO_MAIN_PHASE_2 = (int)2097152L;
    /**
     * {@snippet lang=c :
     * #define DUEL_NO_MAIN_PHASE_2 2097152
     * }
     */
    public static int DUEL_NO_MAIN_PHASE_2() {
        return DUEL_NO_MAIN_PHASE_2;
    }
    private static final int DUEL_3_COLUMNS_FIELD = (int)4194304L;
    /**
     * {@snippet lang=c :
     * #define DUEL_3_COLUMNS_FIELD 4194304
     * }
     */
    public static int DUEL_3_COLUMNS_FIELD() {
        return DUEL_3_COLUMNS_FIELD;
    }
    private static final int DUEL_DRAW_UNTIL_5 = (int)8388608L;
    /**
     * {@snippet lang=c :
     * #define DUEL_DRAW_UNTIL_5 8388608
     * }
     */
    public static int DUEL_DRAW_UNTIL_5() {
        return DUEL_DRAW_UNTIL_5;
    }
    private static final int DUEL_NO_HAND_LIMIT = (int)16777216L;
    /**
     * {@snippet lang=c :
     * #define DUEL_NO_HAND_LIMIT 16777216
     * }
     */
    public static int DUEL_NO_HAND_LIMIT() {
        return DUEL_NO_HAND_LIMIT;
    }
    private static final int DUEL_UNLIMITED_SUMMONS = (int)33554432L;
    /**
     * {@snippet lang=c :
     * #define DUEL_UNLIMITED_SUMMONS 33554432
     * }
     */
    public static int DUEL_UNLIMITED_SUMMONS() {
        return DUEL_UNLIMITED_SUMMONS;
    }
    private static final int DUEL_INVERTED_QUICK_PRIORITY = (int)67108864L;
    /**
     * {@snippet lang=c :
     * #define DUEL_INVERTED_QUICK_PRIORITY 67108864
     * }
     */
    public static int DUEL_INVERTED_QUICK_PRIORITY() {
        return DUEL_INVERTED_QUICK_PRIORITY;
    }
    private static final int DUEL_EQUIP_NOT_SENT_IF_MISSING_TARGET = (int)134217728L;
    /**
     * {@snippet lang=c :
     * #define DUEL_EQUIP_NOT_SENT_IF_MISSING_TARGET 134217728
     * }
     */
    public static int DUEL_EQUIP_NOT_SENT_IF_MISSING_TARGET() {
        return DUEL_EQUIP_NOT_SENT_IF_MISSING_TARGET;
    }
    private static final int DUEL_0_ATK_DESTROYED = (int)268435456L;
    /**
     * {@snippet lang=c :
     * #define DUEL_0_ATK_DESTROYED 268435456
     * }
     */
    public static int DUEL_0_ATK_DESTROYED() {
        return DUEL_0_ATK_DESTROYED;
    }
    private static final int DUEL_STORE_ATTACK_REPLAYS = (int)536870912L;
    /**
     * {@snippet lang=c :
     * #define DUEL_STORE_ATTACK_REPLAYS 536870912
     * }
     */
    public static int DUEL_STORE_ATTACK_REPLAYS() {
        return DUEL_STORE_ATTACK_REPLAYS;
    }
    private static final int DUEL_SINGLE_CHAIN_IN_DAMAGE_SUBSTEP = (int)1073741824L;
    /**
     * {@snippet lang=c :
     * #define DUEL_SINGLE_CHAIN_IN_DAMAGE_SUBSTEP 1073741824
     * }
     */
    public static int DUEL_SINGLE_CHAIN_IN_DAMAGE_SUBSTEP() {
        return DUEL_SINGLE_CHAIN_IN_DAMAGE_SUBSTEP;
    }
    private static final int DUEL_MODE_MR4_FORB = (int)0L;
    /**
     * {@snippet lang=c :
     * #define DUEL_MODE_MR4_FORB 0
     * }
     */
    public static int DUEL_MODE_MR4_FORB() {
        return DUEL_MODE_MR4_FORB;
    }
    private static final int DUEL_MODE_MR5_FORB = (int)0L;
    /**
     * {@snippet lang=c :
     * #define DUEL_MODE_MR5_FORB 0
     * }
     */
    public static int DUEL_MODE_MR5_FORB() {
        return DUEL_MODE_MR5_FORB;
    }
    private static final int OCG_VERSION_MAJOR = (int)11L;
    /**
     * {@snippet lang=c :
     * #define OCG_VERSION_MAJOR 11
     * }
     */
    public static int OCG_VERSION_MAJOR() {
        return OCG_VERSION_MAJOR;
    }
    private static final int OCG_VERSION_MINOR = (int)0L;
    /**
     * {@snippet lang=c :
     * #define OCG_VERSION_MINOR 0
     * }
     */
    public static int OCG_VERSION_MINOR() {
        return OCG_VERSION_MINOR;
    }

    private static class __assert_rtn {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            yugioh_h.C_POINTER,
            yugioh_h.C_POINTER,
            yugioh_h.C_INT,
            yugioh_h.C_POINTER
        );

        public static final MemorySegment ADDR = yugioh_h.findOrThrow("__assert_rtn");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void __assert_rtn(const char *, const char *, int, const char *)
     * }
     */
    public static FunctionDescriptor __assert_rtn$descriptor() {
        return __assert_rtn.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void __assert_rtn(const char *, const char *, int, const char *)
     * }
     */
    public static MethodHandle __assert_rtn$handle() {
        return __assert_rtn.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void __assert_rtn(const char *, const char *, int, const char *)
     * }
     */
    public static MemorySegment __assert_rtn$address() {
        return __assert_rtn.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void __assert_rtn(const char *, const char *, int, const char *)
     * }
     */
    public static void __assert_rtn(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3) {
        var mh$ = __assert_rtn.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__assert_rtn", x0, x1, x2, x3);
            }
            mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef signed char int8_t
     * }
     */
    public static final OfByte int8_t = yugioh_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef short int16_t
     * }
     */
    public static final OfShort int16_t = yugioh_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int int32_t
     * }
     */
    public static final OfInt int32_t = yugioh_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long long int64_t
     * }
     */
    public static final OfLong int64_t = yugioh_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned char uint8_t
     * }
     */
    public static final OfByte uint8_t = yugioh_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned short uint16_t
     * }
     */
    public static final OfShort uint16_t = yugioh_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int uint32_t
     * }
     */
    public static final OfInt uint32_t = yugioh_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long uint64_t
     * }
     */
    public static final OfLong uint64_t = yugioh_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int8_t int_least8_t
     * }
     */
    public static final OfByte int_least8_t = yugioh_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef int16_t int_least16_t
     * }
     */
    public static final OfShort int_least16_t = yugioh_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int32_t int_least32_t
     * }
     */
    public static final OfInt int_least32_t = yugioh_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int64_t int_least64_t
     * }
     */
    public static final OfLong int_least64_t = yugioh_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef uint8_t uint_least8_t
     * }
     */
    public static final OfByte uint_least8_t = yugioh_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef uint16_t uint_least16_t
     * }
     */
    public static final OfShort uint_least16_t = yugioh_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef uint32_t uint_least32_t
     * }
     */
    public static final OfInt uint_least32_t = yugioh_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef uint64_t uint_least64_t
     * }
     */
    public static final OfLong uint_least64_t = yugioh_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int8_t int_fast8_t
     * }
     */
    public static final OfByte int_fast8_t = yugioh_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef int16_t int_fast16_t
     * }
     */
    public static final OfShort int_fast16_t = yugioh_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int32_t int_fast32_t
     * }
     */
    public static final OfInt int_fast32_t = yugioh_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int64_t int_fast64_t
     * }
     */
    public static final OfLong int_fast64_t = yugioh_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef uint8_t uint_fast8_t
     * }
     */
    public static final OfByte uint_fast8_t = yugioh_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef uint16_t uint_fast16_t
     * }
     */
    public static final OfShort uint_fast16_t = yugioh_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef uint32_t uint_fast32_t
     * }
     */
    public static final OfInt uint_fast32_t = yugioh_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef uint64_t uint_fast64_t
     * }
     */
    public static final OfLong uint_fast64_t = yugioh_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef signed char __int8_t
     * }
     */
    public static final OfByte __int8_t = yugioh_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned char __uint8_t
     * }
     */
    public static final OfByte __uint8_t = yugioh_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef short __int16_t
     * }
     */
    public static final OfShort __int16_t = yugioh_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __uint16_t
     * }
     */
    public static final OfShort __uint16_t = yugioh_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int __int32_t
     * }
     */
    public static final OfInt __int32_t = yugioh_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __uint32_t
     * }
     */
    public static final OfInt __uint32_t = yugioh_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long long __int64_t
     * }
     */
    public static final OfLong __int64_t = yugioh_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long __uint64_t
     * }
     */
    public static final OfLong __uint64_t = yugioh_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __darwin_intptr_t
     * }
     */
    public static final OfLong __darwin_intptr_t = yugioh_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __darwin_natural_t
     * }
     */
    public static final OfInt __darwin_natural_t = yugioh_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __darwin_ct_rune_t
     * }
     */
    public static final OfInt __darwin_ct_rune_t = yugioh_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __darwin_ptrdiff_t
     * }
     */
    public static final OfLong __darwin_ptrdiff_t = yugioh_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __darwin_size_t
     * }
     */
    public static final OfLong __darwin_size_t = yugioh_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __builtin_va_list __darwin_va_list
     * }
     */
    public static final AddressLayout __darwin_va_list = yugioh_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef int __darwin_wchar_t
     * }
     */
    public static final OfInt __darwin_wchar_t = yugioh_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __darwin_wchar_t __darwin_rune_t
     * }
     */
    public static final OfInt __darwin_rune_t = yugioh_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __darwin_wint_t
     * }
     */
    public static final OfInt __darwin_wint_t = yugioh_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __darwin_clock_t
     * }
     */
    public static final OfLong __darwin_clock_t = yugioh_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_socklen_t
     * }
     */
    public static final OfInt __darwin_socklen_t = yugioh_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __darwin_ssize_t
     * }
     */
    public static final OfLong __darwin_ssize_t = yugioh_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __darwin_time_t
     * }
     */
    public static final OfLong __darwin_time_t = yugioh_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int64_t __darwin_blkcnt_t
     * }
     */
    public static final OfLong __darwin_blkcnt_t = yugioh_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __darwin_blksize_t
     * }
     */
    public static final OfInt __darwin_blksize_t = yugioh_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __darwin_dev_t
     * }
     */
    public static final OfInt __darwin_dev_t = yugioh_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __darwin_fsblkcnt_t
     * }
     */
    public static final OfInt __darwin_fsblkcnt_t = yugioh_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __darwin_fsfilcnt_t
     * }
     */
    public static final OfInt __darwin_fsfilcnt_t = yugioh_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_gid_t
     * }
     */
    public static final OfInt __darwin_gid_t = yugioh_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_id_t
     * }
     */
    public static final OfInt __darwin_id_t = yugioh_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint64_t __darwin_ino64_t
     * }
     */
    public static final OfLong __darwin_ino64_t = yugioh_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __darwin_ino64_t __darwin_ino_t
     * }
     */
    public static final OfLong __darwin_ino_t = yugioh_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __darwin_natural_t __darwin_mach_port_name_t
     * }
     */
    public static final OfInt __darwin_mach_port_name_t = yugioh_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __darwin_mach_port_name_t __darwin_mach_port_t
     * }
     */
    public static final OfInt __darwin_mach_port_t = yugioh_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint16_t __darwin_mode_t
     * }
     */
    public static final OfShort __darwin_mode_t = yugioh_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __int64_t __darwin_off_t
     * }
     */
    public static final OfLong __darwin_off_t = yugioh_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __darwin_pid_t
     * }
     */
    public static final OfInt __darwin_pid_t = yugioh_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_sigset_t
     * }
     */
    public static final OfInt __darwin_sigset_t = yugioh_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __darwin_suseconds_t
     * }
     */
    public static final OfInt __darwin_suseconds_t = yugioh_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_uid_t
     * }
     */
    public static final OfInt __darwin_uid_t = yugioh_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_useconds_t
     * }
     */
    public static final OfInt __darwin_useconds_t = yugioh_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __darwin_pthread_key_t
     * }
     */
    public static final OfLong __darwin_pthread_key_t = yugioh_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef struct _opaque_pthread_t {
     *     long __sig;
     *     struct __darwin_pthread_handler_rec *__cleanup_stack;
     *     char __opaque[8176];
     * } *__darwin_pthread_t
     * }
     */
    public static final AddressLayout __darwin_pthread_t = yugioh_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef __darwin_intptr_t intptr_t
     * }
     */
    public static final OfLong intptr_t = yugioh_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uintptr_t
     * }
     */
    public static final OfLong uintptr_t = yugioh_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long intmax_t
     * }
     */
    public static final OfLong intmax_t = yugioh_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uintmax_t
     * }
     */
    public static final OfLong uintmax_t = yugioh_h.C_LONG;
    private static final byte ACTIVITY_SUMMON = (byte)1L;
    /**
     * {@snippet lang=c :
     * enum ActivityType.ACTIVITY_SUMMON = 1
     * }
     */
    public static byte ACTIVITY_SUMMON() {
        return ACTIVITY_SUMMON;
    }
    private static final byte ACTIVITY_NORMALSUMMON = (byte)2L;
    /**
     * {@snippet lang=c :
     * enum ActivityType.ACTIVITY_NORMALSUMMON = 2
     * }
     */
    public static byte ACTIVITY_NORMALSUMMON() {
        return ACTIVITY_NORMALSUMMON;
    }
    private static final byte ACTIVITY_SPSUMMON = (byte)3L;
    /**
     * {@snippet lang=c :
     * enum ActivityType.ACTIVITY_SPSUMMON = 3
     * }
     */
    public static byte ACTIVITY_SPSUMMON() {
        return ACTIVITY_SPSUMMON;
    }
    private static final byte ACTIVITY_FLIPSUMMON = (byte)4L;
    /**
     * {@snippet lang=c :
     * enum ActivityType.ACTIVITY_FLIPSUMMON = 4
     * }
     */
    public static byte ACTIVITY_FLIPSUMMON() {
        return ACTIVITY_FLIPSUMMON;
    }
    private static final byte ACTIVITY_ATTACK = (byte)5L;
    /**
     * {@snippet lang=c :
     * enum ActivityType.ACTIVITY_ATTACK = 5
     * }
     */
    public static byte ACTIVITY_ATTACK() {
        return ACTIVITY_ATTACK;
    }
    private static final byte ACTIVITY_BATTLE_PHASE = (byte)6L;
    /**
     * {@snippet lang=c :
     * enum ActivityType.ACTIVITY_BATTLE_PHASE = 6
     * }
     */
    public static byte ACTIVITY_BATTLE_PHASE() {
        return ACTIVITY_BATTLE_PHASE;
    }
    private static final byte ACTIVITY_CHAIN = (byte)7L;
    /**
     * {@snippet lang=c :
     * enum ActivityType.ACTIVITY_CHAIN = 7
     * }
     */
    public static byte ACTIVITY_CHAIN() {
        return ACTIVITY_CHAIN;
    }
    private static final int OCG_LOG_TYPE_ERROR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum OCG_LogTypes.OCG_LOG_TYPE_ERROR = 0
     * }
     */
    public static int OCG_LOG_TYPE_ERROR() {
        return OCG_LOG_TYPE_ERROR;
    }
    private static final int OCG_LOG_TYPE_FROM_SCRIPT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum OCG_LogTypes.OCG_LOG_TYPE_FROM_SCRIPT = 1
     * }
     */
    public static int OCG_LOG_TYPE_FROM_SCRIPT() {
        return OCG_LOG_TYPE_FROM_SCRIPT;
    }
    private static final int OCG_LOG_TYPE_FOR_DEBUG = (int)2L;
    /**
     * {@snippet lang=c :
     * enum OCG_LogTypes.OCG_LOG_TYPE_FOR_DEBUG = 2
     * }
     */
    public static int OCG_LOG_TYPE_FOR_DEBUG() {
        return OCG_LOG_TYPE_FOR_DEBUG;
    }
    private static final int OCG_LOG_TYPE_UNDEFINED = (int)3L;
    /**
     * {@snippet lang=c :
     * enum OCG_LogTypes.OCG_LOG_TYPE_UNDEFINED = 3
     * }
     */
    public static int OCG_LOG_TYPE_UNDEFINED() {
        return OCG_LOG_TYPE_UNDEFINED;
    }
    private static final int OCG_DUEL_CREATION_SUCCESS = (int)0L;
    /**
     * {@snippet lang=c :
     * enum OCG_DuelCreationStatus.OCG_DUEL_CREATION_SUCCESS = 0
     * }
     */
    public static int OCG_DUEL_CREATION_SUCCESS() {
        return OCG_DUEL_CREATION_SUCCESS;
    }
    private static final int OCG_DUEL_CREATION_NO_OUTPUT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum OCG_DuelCreationStatus.OCG_DUEL_CREATION_NO_OUTPUT = 1
     * }
     */
    public static int OCG_DUEL_CREATION_NO_OUTPUT() {
        return OCG_DUEL_CREATION_NO_OUTPUT;
    }
    private static final int OCG_DUEL_CREATION_NOT_CREATED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum OCG_DuelCreationStatus.OCG_DUEL_CREATION_NOT_CREATED = 2
     * }
     */
    public static int OCG_DUEL_CREATION_NOT_CREATED() {
        return OCG_DUEL_CREATION_NOT_CREATED;
    }
    private static final int OCG_DUEL_CREATION_NULL_DATA_READER = (int)3L;
    /**
     * {@snippet lang=c :
     * enum OCG_DuelCreationStatus.OCG_DUEL_CREATION_NULL_DATA_READER = 3
     * }
     */
    public static int OCG_DUEL_CREATION_NULL_DATA_READER() {
        return OCG_DUEL_CREATION_NULL_DATA_READER;
    }
    private static final int OCG_DUEL_CREATION_NULL_SCRIPT_READER = (int)4L;
    /**
     * {@snippet lang=c :
     * enum OCG_DuelCreationStatus.OCG_DUEL_CREATION_NULL_SCRIPT_READER = 4
     * }
     */
    public static int OCG_DUEL_CREATION_NULL_SCRIPT_READER() {
        return OCG_DUEL_CREATION_NULL_SCRIPT_READER;
    }
    private static final int OCG_DUEL_CREATION_INCOMPATIBLE_LUA_API = (int)5L;
    /**
     * {@snippet lang=c :
     * enum OCG_DuelCreationStatus.OCG_DUEL_CREATION_INCOMPATIBLE_LUA_API = 5
     * }
     */
    public static int OCG_DUEL_CREATION_INCOMPATIBLE_LUA_API() {
        return OCG_DUEL_CREATION_INCOMPATIBLE_LUA_API;
    }
    private static final int OCG_DUEL_CREATION_NULL_RNG_SEED = (int)6L;
    /**
     * {@snippet lang=c :
     * enum OCG_DuelCreationStatus.OCG_DUEL_CREATION_NULL_RNG_SEED = 6
     * }
     */
    public static int OCG_DUEL_CREATION_NULL_RNG_SEED() {
        return OCG_DUEL_CREATION_NULL_RNG_SEED;
    }
    private static final int OCG_DUEL_STATUS_END = (int)0L;
    /**
     * {@snippet lang=c :
     * enum OCG_DuelStatus.OCG_DUEL_STATUS_END = 0
     * }
     */
    public static int OCG_DUEL_STATUS_END() {
        return OCG_DUEL_STATUS_END;
    }
    private static final int OCG_DUEL_STATUS_AWAITING = (int)1L;
    /**
     * {@snippet lang=c :
     * enum OCG_DuelStatus.OCG_DUEL_STATUS_AWAITING = 1
     * }
     */
    public static int OCG_DUEL_STATUS_AWAITING() {
        return OCG_DUEL_STATUS_AWAITING;
    }
    private static final int OCG_DUEL_STATUS_CONTINUE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum OCG_DuelStatus.OCG_DUEL_STATUS_CONTINUE = 2
     * }
     */
    public static int OCG_DUEL_STATUS_CONTINUE() {
        return OCG_DUEL_STATUS_CONTINUE;
    }
    /**
     * {@snippet lang=c :
     * typedef void *OCG_Duel
     * }
     */
    public static final AddressLayout OCG_Duel = yugioh_h.C_POINTER;

    private static class OCG_GetVersion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            yugioh_h.C_POINTER,
            yugioh_h.C_POINTER
        );

        public static final MemorySegment ADDR = yugioh_h.findOrThrow("OCG_GetVersion");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void OCG_GetVersion(int *major, int *minor)
     * }
     */
    public static FunctionDescriptor OCG_GetVersion$descriptor() {
        return OCG_GetVersion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void OCG_GetVersion(int *major, int *minor)
     * }
     */
    public static MethodHandle OCG_GetVersion$handle() {
        return OCG_GetVersion.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void OCG_GetVersion(int *major, int *minor)
     * }
     */
    public static MemorySegment OCG_GetVersion$address() {
        return OCG_GetVersion.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void OCG_GetVersion(int *major, int *minor)
     * }
     */
    public static void OCG_GetVersion(MemorySegment major, MemorySegment minor) {
        var mh$ = OCG_GetVersion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OCG_GetVersion", major, minor);
            }
            mh$.invokeExact(major, minor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OCG_CreateDuel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            yugioh_h.C_INT,
            yugioh_h.C_POINTER,
            yugioh_h.C_POINTER
        );

        public static final MemorySegment ADDR = yugioh_h.findOrThrow("OCG_CreateDuel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int OCG_CreateDuel(OCG_Duel *out_ocg_duel, const OCG_DuelOptions *options_ptr)
     * }
     */
    public static FunctionDescriptor OCG_CreateDuel$descriptor() {
        return OCG_CreateDuel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int OCG_CreateDuel(OCG_Duel *out_ocg_duel, const OCG_DuelOptions *options_ptr)
     * }
     */
    public static MethodHandle OCG_CreateDuel$handle() {
        return OCG_CreateDuel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int OCG_CreateDuel(OCG_Duel *out_ocg_duel, const OCG_DuelOptions *options_ptr)
     * }
     */
    public static MemorySegment OCG_CreateDuel$address() {
        return OCG_CreateDuel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int OCG_CreateDuel(OCG_Duel *out_ocg_duel, const OCG_DuelOptions *options_ptr)
     * }
     */
    public static int OCG_CreateDuel(MemorySegment out_ocg_duel, MemorySegment options_ptr) {
        var mh$ = OCG_CreateDuel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OCG_CreateDuel", out_ocg_duel, options_ptr);
            }
            return (int)mh$.invokeExact(out_ocg_duel, options_ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OCG_DestroyDuel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            yugioh_h.C_POINTER
        );

        public static final MemorySegment ADDR = yugioh_h.findOrThrow("OCG_DestroyDuel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void OCG_DestroyDuel(OCG_Duel ocg_duel)
     * }
     */
    public static FunctionDescriptor OCG_DestroyDuel$descriptor() {
        return OCG_DestroyDuel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void OCG_DestroyDuel(OCG_Duel ocg_duel)
     * }
     */
    public static MethodHandle OCG_DestroyDuel$handle() {
        return OCG_DestroyDuel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void OCG_DestroyDuel(OCG_Duel ocg_duel)
     * }
     */
    public static MemorySegment OCG_DestroyDuel$address() {
        return OCG_DestroyDuel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void OCG_DestroyDuel(OCG_Duel ocg_duel)
     * }
     */
    public static void OCG_DestroyDuel(MemorySegment ocg_duel) {
        var mh$ = OCG_DestroyDuel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OCG_DestroyDuel", ocg_duel);
            }
            mh$.invokeExact(ocg_duel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OCG_DuelNewCard {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            yugioh_h.C_POINTER,
            yugioh_h.C_POINTER
        );

        public static final MemorySegment ADDR = yugioh_h.findOrThrow("OCG_DuelNewCard");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void OCG_DuelNewCard(OCG_Duel ocg_duel, const OCG_NewCardInfo *info_ptr)
     * }
     */
    public static FunctionDescriptor OCG_DuelNewCard$descriptor() {
        return OCG_DuelNewCard.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void OCG_DuelNewCard(OCG_Duel ocg_duel, const OCG_NewCardInfo *info_ptr)
     * }
     */
    public static MethodHandle OCG_DuelNewCard$handle() {
        return OCG_DuelNewCard.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void OCG_DuelNewCard(OCG_Duel ocg_duel, const OCG_NewCardInfo *info_ptr)
     * }
     */
    public static MemorySegment OCG_DuelNewCard$address() {
        return OCG_DuelNewCard.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void OCG_DuelNewCard(OCG_Duel ocg_duel, const OCG_NewCardInfo *info_ptr)
     * }
     */
    public static void OCG_DuelNewCard(MemorySegment ocg_duel, MemorySegment info_ptr) {
        var mh$ = OCG_DuelNewCard.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OCG_DuelNewCard", ocg_duel, info_ptr);
            }
            mh$.invokeExact(ocg_duel, info_ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OCG_StartDuel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            yugioh_h.C_POINTER
        );

        public static final MemorySegment ADDR = yugioh_h.findOrThrow("OCG_StartDuel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void OCG_StartDuel(OCG_Duel ocg_duel)
     * }
     */
    public static FunctionDescriptor OCG_StartDuel$descriptor() {
        return OCG_StartDuel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void OCG_StartDuel(OCG_Duel ocg_duel)
     * }
     */
    public static MethodHandle OCG_StartDuel$handle() {
        return OCG_StartDuel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void OCG_StartDuel(OCG_Duel ocg_duel)
     * }
     */
    public static MemorySegment OCG_StartDuel$address() {
        return OCG_StartDuel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void OCG_StartDuel(OCG_Duel ocg_duel)
     * }
     */
    public static void OCG_StartDuel(MemorySegment ocg_duel) {
        var mh$ = OCG_StartDuel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OCG_StartDuel", ocg_duel);
            }
            mh$.invokeExact(ocg_duel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OCG_DuelProcess {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            yugioh_h.C_INT,
            yugioh_h.C_POINTER
        );

        public static final MemorySegment ADDR = yugioh_h.findOrThrow("OCG_DuelProcess");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int OCG_DuelProcess(OCG_Duel ocg_duel)
     * }
     */
    public static FunctionDescriptor OCG_DuelProcess$descriptor() {
        return OCG_DuelProcess.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int OCG_DuelProcess(OCG_Duel ocg_duel)
     * }
     */
    public static MethodHandle OCG_DuelProcess$handle() {
        return OCG_DuelProcess.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int OCG_DuelProcess(OCG_Duel ocg_duel)
     * }
     */
    public static MemorySegment OCG_DuelProcess$address() {
        return OCG_DuelProcess.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int OCG_DuelProcess(OCG_Duel ocg_duel)
     * }
     */
    public static int OCG_DuelProcess(MemorySegment ocg_duel) {
        var mh$ = OCG_DuelProcess.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OCG_DuelProcess", ocg_duel);
            }
            return (int)mh$.invokeExact(ocg_duel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OCG_DuelGetMessage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            yugioh_h.C_POINTER,
            yugioh_h.C_POINTER,
            yugioh_h.C_POINTER
        );

        public static final MemorySegment ADDR = yugioh_h.findOrThrow("OCG_DuelGetMessage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *OCG_DuelGetMessage(OCG_Duel ocg_duel, uint32_t *length)
     * }
     */
    public static FunctionDescriptor OCG_DuelGetMessage$descriptor() {
        return OCG_DuelGetMessage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *OCG_DuelGetMessage(OCG_Duel ocg_duel, uint32_t *length)
     * }
     */
    public static MethodHandle OCG_DuelGetMessage$handle() {
        return OCG_DuelGetMessage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *OCG_DuelGetMessage(OCG_Duel ocg_duel, uint32_t *length)
     * }
     */
    public static MemorySegment OCG_DuelGetMessage$address() {
        return OCG_DuelGetMessage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *OCG_DuelGetMessage(OCG_Duel ocg_duel, uint32_t *length)
     * }
     */
    public static MemorySegment OCG_DuelGetMessage(MemorySegment ocg_duel, MemorySegment length) {
        var mh$ = OCG_DuelGetMessage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OCG_DuelGetMessage", ocg_duel, length);
            }
            return (MemorySegment)mh$.invokeExact(ocg_duel, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OCG_DuelSetResponse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            yugioh_h.C_POINTER,
            yugioh_h.C_POINTER,
            yugioh_h.C_INT
        );

        public static final MemorySegment ADDR = yugioh_h.findOrThrow("OCG_DuelSetResponse");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void OCG_DuelSetResponse(OCG_Duel ocg_duel, const void *buffer, uint32_t length)
     * }
     */
    public static FunctionDescriptor OCG_DuelSetResponse$descriptor() {
        return OCG_DuelSetResponse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void OCG_DuelSetResponse(OCG_Duel ocg_duel, const void *buffer, uint32_t length)
     * }
     */
    public static MethodHandle OCG_DuelSetResponse$handle() {
        return OCG_DuelSetResponse.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void OCG_DuelSetResponse(OCG_Duel ocg_duel, const void *buffer, uint32_t length)
     * }
     */
    public static MemorySegment OCG_DuelSetResponse$address() {
        return OCG_DuelSetResponse.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void OCG_DuelSetResponse(OCG_Duel ocg_duel, const void *buffer, uint32_t length)
     * }
     */
    public static void OCG_DuelSetResponse(MemorySegment ocg_duel, MemorySegment buffer, int length) {
        var mh$ = OCG_DuelSetResponse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OCG_DuelSetResponse", ocg_duel, buffer, length);
            }
            mh$.invokeExact(ocg_duel, buffer, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OCG_LoadScript {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            yugioh_h.C_INT,
            yugioh_h.C_POINTER,
            yugioh_h.C_POINTER,
            yugioh_h.C_INT,
            yugioh_h.C_POINTER
        );

        public static final MemorySegment ADDR = yugioh_h.findOrThrow("OCG_LoadScript");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int OCG_LoadScript(OCG_Duel ocg_duel, const char *buffer, uint32_t length, const char *name)
     * }
     */
    public static FunctionDescriptor OCG_LoadScript$descriptor() {
        return OCG_LoadScript.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int OCG_LoadScript(OCG_Duel ocg_duel, const char *buffer, uint32_t length, const char *name)
     * }
     */
    public static MethodHandle OCG_LoadScript$handle() {
        return OCG_LoadScript.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int OCG_LoadScript(OCG_Duel ocg_duel, const char *buffer, uint32_t length, const char *name)
     * }
     */
    public static MemorySegment OCG_LoadScript$address() {
        return OCG_LoadScript.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int OCG_LoadScript(OCG_Duel ocg_duel, const char *buffer, uint32_t length, const char *name)
     * }
     */
    public static int OCG_LoadScript(MemorySegment ocg_duel, MemorySegment buffer, int length, MemorySegment name) {
        var mh$ = OCG_LoadScript.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OCG_LoadScript", ocg_duel, buffer, length, name);
            }
            return (int)mh$.invokeExact(ocg_duel, buffer, length, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OCG_DuelQueryCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            yugioh_h.C_INT,
            yugioh_h.C_POINTER,
            yugioh_h.C_CHAR,
            yugioh_h.C_INT
        );

        public static final MemorySegment ADDR = yugioh_h.findOrThrow("OCG_DuelQueryCount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32_t OCG_DuelQueryCount(OCG_Duel ocg_duel, uint8_t team, uint32_t loc)
     * }
     */
    public static FunctionDescriptor OCG_DuelQueryCount$descriptor() {
        return OCG_DuelQueryCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32_t OCG_DuelQueryCount(OCG_Duel ocg_duel, uint8_t team, uint32_t loc)
     * }
     */
    public static MethodHandle OCG_DuelQueryCount$handle() {
        return OCG_DuelQueryCount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * uint32_t OCG_DuelQueryCount(OCG_Duel ocg_duel, uint8_t team, uint32_t loc)
     * }
     */
    public static MemorySegment OCG_DuelQueryCount$address() {
        return OCG_DuelQueryCount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * uint32_t OCG_DuelQueryCount(OCG_Duel ocg_duel, uint8_t team, uint32_t loc)
     * }
     */
    public static int OCG_DuelQueryCount(MemorySegment ocg_duel, byte team, int loc) {
        var mh$ = OCG_DuelQueryCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OCG_DuelQueryCount", ocg_duel, team, loc);
            }
            return (int)mh$.invokeExact(ocg_duel, team, loc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OCG_DuelQuery {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            yugioh_h.C_POINTER,
            yugioh_h.C_POINTER,
            yugioh_h.C_POINTER,
            yugioh_h.C_POINTER
        );

        public static final MemorySegment ADDR = yugioh_h.findOrThrow("OCG_DuelQuery");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *OCG_DuelQuery(OCG_Duel ocg_duel, uint32_t *length, const OCG_QueryInfo *info_ptr)
     * }
     */
    public static FunctionDescriptor OCG_DuelQuery$descriptor() {
        return OCG_DuelQuery.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *OCG_DuelQuery(OCG_Duel ocg_duel, uint32_t *length, const OCG_QueryInfo *info_ptr)
     * }
     */
    public static MethodHandle OCG_DuelQuery$handle() {
        return OCG_DuelQuery.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *OCG_DuelQuery(OCG_Duel ocg_duel, uint32_t *length, const OCG_QueryInfo *info_ptr)
     * }
     */
    public static MemorySegment OCG_DuelQuery$address() {
        return OCG_DuelQuery.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *OCG_DuelQuery(OCG_Duel ocg_duel, uint32_t *length, const OCG_QueryInfo *info_ptr)
     * }
     */
    public static MemorySegment OCG_DuelQuery(MemorySegment ocg_duel, MemorySegment length, MemorySegment info_ptr) {
        var mh$ = OCG_DuelQuery.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OCG_DuelQuery", ocg_duel, length, info_ptr);
            }
            return (MemorySegment)mh$.invokeExact(ocg_duel, length, info_ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OCG_DuelQueryLocation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            yugioh_h.C_POINTER,
            yugioh_h.C_POINTER,
            yugioh_h.C_POINTER,
            yugioh_h.C_POINTER
        );

        public static final MemorySegment ADDR = yugioh_h.findOrThrow("OCG_DuelQueryLocation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *OCG_DuelQueryLocation(OCG_Duel ocg_duel, uint32_t *length, const OCG_QueryInfo *info_ptr)
     * }
     */
    public static FunctionDescriptor OCG_DuelQueryLocation$descriptor() {
        return OCG_DuelQueryLocation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *OCG_DuelQueryLocation(OCG_Duel ocg_duel, uint32_t *length, const OCG_QueryInfo *info_ptr)
     * }
     */
    public static MethodHandle OCG_DuelQueryLocation$handle() {
        return OCG_DuelQueryLocation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *OCG_DuelQueryLocation(OCG_Duel ocg_duel, uint32_t *length, const OCG_QueryInfo *info_ptr)
     * }
     */
    public static MemorySegment OCG_DuelQueryLocation$address() {
        return OCG_DuelQueryLocation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *OCG_DuelQueryLocation(OCG_Duel ocg_duel, uint32_t *length, const OCG_QueryInfo *info_ptr)
     * }
     */
    public static MemorySegment OCG_DuelQueryLocation(MemorySegment ocg_duel, MemorySegment length, MemorySegment info_ptr) {
        var mh$ = OCG_DuelQueryLocation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OCG_DuelQueryLocation", ocg_duel, length, info_ptr);
            }
            return (MemorySegment)mh$.invokeExact(ocg_duel, length, info_ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OCG_DuelQueryField {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            yugioh_h.C_POINTER,
            yugioh_h.C_POINTER,
            yugioh_h.C_POINTER
        );

        public static final MemorySegment ADDR = yugioh_h.findOrThrow("OCG_DuelQueryField");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *OCG_DuelQueryField(OCG_Duel ocg_duel, uint32_t *length)
     * }
     */
    public static FunctionDescriptor OCG_DuelQueryField$descriptor() {
        return OCG_DuelQueryField.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *OCG_DuelQueryField(OCG_Duel ocg_duel, uint32_t *length)
     * }
     */
    public static MethodHandle OCG_DuelQueryField$handle() {
        return OCG_DuelQueryField.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *OCG_DuelQueryField(OCG_Duel ocg_duel, uint32_t *length)
     * }
     */
    public static MemorySegment OCG_DuelQueryField$address() {
        return OCG_DuelQueryField.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *OCG_DuelQueryField(OCG_Duel ocg_duel, uint32_t *length)
     * }
     */
    public static MemorySegment OCG_DuelQueryField(MemorySegment ocg_duel, MemorySegment length) {
        var mh$ = OCG_DuelQueryField.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OCG_DuelQueryField", ocg_duel, length);
            }
            return (MemorySegment)mh$.invokeExact(ocg_duel, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * #define __DARWIN_SUF_EXTSN "$DARWIN_EXTSN"
     * }
     */
    public static MemorySegment __DARWIN_SUF_EXTSN() {
        class Holder {
            static final MemorySegment __DARWIN_SUF_EXTSN
                = yugioh_h.LIBRARY_ARENA.allocateFrom("$DARWIN_EXTSN");
        }
        return Holder.__DARWIN_SUF_EXTSN;
    }
    private static final long __DARWIN_C_ANSI = 4096L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_C_ANSI 4096
     * }
     */
    public static long __DARWIN_C_ANSI() {
        return __DARWIN_C_ANSI;
    }
    private static final long __DARWIN_C_FULL = 900000L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_C_FULL 900000
     * }
     */
    public static long __DARWIN_C_FULL() {
        return __DARWIN_C_FULL;
    }
    private static final long __DARWIN_C_LEVEL = 900000L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_C_LEVEL 900000
     * }
     */
    public static long __DARWIN_C_LEVEL() {
        return __DARWIN_C_LEVEL;
    }
    /**
     * {@snippet lang=c :
     * #define __ASSERT_FILE_NAME "jextract$8170948928233844515.h"
     * }
     */
    public static MemorySegment __ASSERT_FILE_NAME() {
        class Holder {
            static final MemorySegment __ASSERT_FILE_NAME
                = yugioh_h.LIBRARY_ARENA.allocateFrom("jextract$8170948928233844515.h");
        }
        return Holder.__ASSERT_FILE_NAME;
    }
    private static final MemorySegment __DARWIN_NULL = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define __DARWIN_NULL (void*) 0
     * }
     */
    public static MemorySegment __DARWIN_NULL() {
        return __DARWIN_NULL;
    }
    private static final long INT64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT64_MAX 9223372036854775807
     * }
     */
    public static long INT64_MAX() {
        return INT64_MAX;
    }
    private static final int INT8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT8_MIN -128
     * }
     */
    public static int INT8_MIN() {
        return INT8_MIN;
    }
    private static final int INT16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT16_MIN -32768
     * }
     */
    public static int INT16_MIN() {
        return INT16_MIN;
    }
    private static final int INT32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT32_MIN -2147483648
     * }
     */
    public static int INT32_MIN() {
        return INT32_MIN;
    }
    private static final long INT64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT64_MIN -9223372036854775808
     * }
     */
    public static long INT64_MIN() {
        return INT64_MIN;
    }
    private static final int UINT32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT32_MAX 4294967295
     * }
     */
    public static int UINT32_MAX() {
        return UINT32_MAX;
    }
    private static final long UINT64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT64_MAX -1
     * }
     */
    public static long UINT64_MAX() {
        return UINT64_MAX;
    }
    private static final int INT_LEAST8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST8_MIN -128
     * }
     */
    public static int INT_LEAST8_MIN() {
        return INT_LEAST8_MIN;
    }
    private static final int INT_LEAST16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST16_MIN -32768
     * }
     */
    public static int INT_LEAST16_MIN() {
        return INT_LEAST16_MIN;
    }
    private static final int INT_LEAST32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST32_MIN -2147483648
     * }
     */
    public static int INT_LEAST32_MIN() {
        return INT_LEAST32_MIN;
    }
    private static final long INT_LEAST64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_LEAST64_MIN() {
        return INT_LEAST64_MIN;
    }
    private static final int INT_LEAST8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST8_MAX 127
     * }
     */
    public static int INT_LEAST8_MAX() {
        return INT_LEAST8_MAX;
    }
    private static final int INT_LEAST16_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST16_MAX 32767
     * }
     */
    public static int INT_LEAST16_MAX() {
        return INT_LEAST16_MAX;
    }
    private static final int INT_LEAST32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST32_MAX 2147483647
     * }
     */
    public static int INT_LEAST32_MAX() {
        return INT_LEAST32_MAX;
    }
    private static final long INT_LEAST64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_LEAST64_MAX() {
        return INT_LEAST64_MAX;
    }
    private static final int UINT_LEAST8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST8_MAX 255
     * }
     */
    public static int UINT_LEAST8_MAX() {
        return UINT_LEAST8_MAX;
    }
    private static final int UINT_LEAST16_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST16_MAX 65535
     * }
     */
    public static int UINT_LEAST16_MAX() {
        return UINT_LEAST16_MAX;
    }
    private static final int UINT_LEAST32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST32_MAX 4294967295
     * }
     */
    public static int UINT_LEAST32_MAX() {
        return UINT_LEAST32_MAX;
    }
    private static final long UINT_LEAST64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST64_MAX -1
     * }
     */
    public static long UINT_LEAST64_MAX() {
        return UINT_LEAST64_MAX;
    }
    private static final int INT_FAST8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST8_MIN -128
     * }
     */
    public static int INT_FAST8_MIN() {
        return INT_FAST8_MIN;
    }
    private static final int INT_FAST16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST16_MIN -32768
     * }
     */
    public static int INT_FAST16_MIN() {
        return INT_FAST16_MIN;
    }
    private static final int INT_FAST32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST32_MIN -2147483648
     * }
     */
    public static int INT_FAST32_MIN() {
        return INT_FAST32_MIN;
    }
    private static final long INT_FAST64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST64_MIN() {
        return INT_FAST64_MIN;
    }
    private static final int INT_FAST8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST8_MAX 127
     * }
     */
    public static int INT_FAST8_MAX() {
        return INT_FAST8_MAX;
    }
    private static final int INT_FAST16_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST16_MAX 32767
     * }
     */
    public static int INT_FAST16_MAX() {
        return INT_FAST16_MAX;
    }
    private static final int INT_FAST32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST32_MAX 2147483647
     * }
     */
    public static int INT_FAST32_MAX() {
        return INT_FAST32_MAX;
    }
    private static final long INT_FAST64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST64_MAX() {
        return INT_FAST64_MAX;
    }
    private static final int UINT_FAST8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST8_MAX 255
     * }
     */
    public static int UINT_FAST8_MAX() {
        return UINT_FAST8_MAX;
    }
    private static final int UINT_FAST16_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST16_MAX 65535
     * }
     */
    public static int UINT_FAST16_MAX() {
        return UINT_FAST16_MAX;
    }
    private static final int UINT_FAST32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST32_MAX 4294967295
     * }
     */
    public static int UINT_FAST32_MAX() {
        return UINT_FAST32_MAX;
    }
    private static final long UINT_FAST64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST64_MAX -1
     * }
     */
    public static long UINT_FAST64_MAX() {
        return UINT_FAST64_MAX;
    }
    private static final long INTPTR_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INTPTR_MAX 9223372036854775807
     * }
     */
    public static long INTPTR_MAX() {
        return INTPTR_MAX;
    }
    private static final long INTPTR_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INTPTR_MIN -9223372036854775808
     * }
     */
    public static long INTPTR_MIN() {
        return INTPTR_MIN;
    }
    private static final long UINTPTR_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINTPTR_MAX -1
     * }
     */
    public static long UINTPTR_MAX() {
        return UINTPTR_MAX;
    }
    private static final long INTMAX_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INTMAX_MAX 9223372036854775807
     * }
     */
    public static long INTMAX_MAX() {
        return INTMAX_MAX;
    }
    private static final long UINTMAX_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINTMAX_MAX -1
     * }
     */
    public static long UINTMAX_MAX() {
        return UINTMAX_MAX;
    }
    private static final long INTMAX_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INTMAX_MIN -9223372036854775808
     * }
     */
    public static long INTMAX_MIN() {
        return INTMAX_MIN;
    }
    private static final long PTRDIFF_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define PTRDIFF_MIN -9223372036854775808
     * }
     */
    public static long PTRDIFF_MIN() {
        return PTRDIFF_MIN;
    }
    private static final long PTRDIFF_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define PTRDIFF_MAX 9223372036854775807
     * }
     */
    public static long PTRDIFF_MAX() {
        return PTRDIFF_MAX;
    }
    private static final long SIZE_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define SIZE_MAX -1
     * }
     */
    public static long SIZE_MAX() {
        return SIZE_MAX;
    }
    private static final long RSIZE_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define RSIZE_MAX 9223372036854775807
     * }
     */
    public static long RSIZE_MAX() {
        return RSIZE_MAX;
    }
    private static final int WCHAR_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define WCHAR_MAX 2147483647
     * }
     */
    public static int WCHAR_MAX() {
        return WCHAR_MAX;
    }
    private static final int WCHAR_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define WCHAR_MIN -2147483648
     * }
     */
    public static int WCHAR_MIN() {
        return WCHAR_MIN;
    }
    private static final int WINT_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define WINT_MIN -2147483648
     * }
     */
    public static int WINT_MIN() {
        return WINT_MIN;
    }
    private static final int WINT_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define WINT_MAX 2147483647
     * }
     */
    public static int WINT_MAX() {
        return WINT_MAX;
    }
    private static final int SIG_ATOMIC_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define SIG_ATOMIC_MIN -2147483648
     * }
     */
    public static int SIG_ATOMIC_MIN() {
        return SIG_ATOMIC_MIN;
    }
    private static final int SIG_ATOMIC_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define SIG_ATOMIC_MAX 2147483647
     * }
     */
    public static int SIG_ATOMIC_MAX() {
        return SIG_ATOMIC_MAX;
    }
    private static final int ATTRIBUTE_ALL = (int)127L;
    /**
     * {@snippet lang=c :
     * #define ATTRIBUTE_ALL 127
     * }
     */
    public static int ATTRIBUTE_ALL() {
        return ATTRIBUTE_ALL;
    }
    private static final int RACE_GALAXY = (int)2147483648L;
    /**
     * {@snippet lang=c :
     * #define RACE_GALAXY 2147483648
     * }
     */
    public static int RACE_GALAXY() {
        return RACE_GALAXY;
    }
    private static final long RACE_YOKAI = 4611686018427387904L;
    /**
     * {@snippet lang=c :
     * #define RACE_YOKAI 4611686018427387904
     * }
     */
    public static long RACE_YOKAI() {
        return RACE_YOKAI;
    }
    private static final int RACE_MAX = (int)2147483648L;
    /**
     * {@snippet lang=c :
     * #define RACE_MAX 2147483648
     * }
     */
    public static int RACE_MAX() {
        return RACE_MAX;
    }
    private static final long RACE_ALL = -1L;
    /**
     * {@snippet lang=c :
     * #define RACE_ALL -1
     * }
     */
    public static long RACE_ALL() {
        return RACE_ALL;
    }
    private static final int QUERY_END = (int)2147483648L;
    /**
     * {@snippet lang=c :
     * #define QUERY_END 2147483648
     * }
     */
    public static int QUERY_END() {
        return QUERY_END;
    }
    private static final long OPCODE_ADD = 4611686018427387904L;
    /**
     * {@snippet lang=c :
     * #define OPCODE_ADD 4611686018427387904
     * }
     */
    public static long OPCODE_ADD() {
        return OPCODE_ADD;
    }
    private static final long OPCODE_SUB = 4611686022722355200L;
    /**
     * {@snippet lang=c :
     * #define OPCODE_SUB 4611686022722355200
     * }
     */
    public static long OPCODE_SUB() {
        return OPCODE_SUB;
    }
    private static final long OPCODE_MUL = 4611686027017322496L;
    /**
     * {@snippet lang=c :
     * #define OPCODE_MUL 4611686027017322496
     * }
     */
    public static long OPCODE_MUL() {
        return OPCODE_MUL;
    }
    private static final long OPCODE_DIV = 4611686031312289792L;
    /**
     * {@snippet lang=c :
     * #define OPCODE_DIV 4611686031312289792
     * }
     */
    public static long OPCODE_DIV() {
        return OPCODE_DIV;
    }
    private static final long OPCODE_AND = 4611686035607257088L;
    /**
     * {@snippet lang=c :
     * #define OPCODE_AND 4611686035607257088
     * }
     */
    public static long OPCODE_AND() {
        return OPCODE_AND;
    }
    private static final long OPCODE_OR = 4611686039902224384L;
    /**
     * {@snippet lang=c :
     * #define OPCODE_OR 4611686039902224384
     * }
     */
    public static long OPCODE_OR() {
        return OPCODE_OR;
    }
    private static final long OPCODE_NEG = 4611686044197191680L;
    /**
     * {@snippet lang=c :
     * #define OPCODE_NEG 4611686044197191680
     * }
     */
    public static long OPCODE_NEG() {
        return OPCODE_NEG;
    }
    private static final long OPCODE_NOT = 4611686048492158976L;
    /**
     * {@snippet lang=c :
     * #define OPCODE_NOT 4611686048492158976
     * }
     */
    public static long OPCODE_NOT() {
        return OPCODE_NOT;
    }
    private static final long OPCODE_BAND = 4611686052787126272L;
    /**
     * {@snippet lang=c :
     * #define OPCODE_BAND 4611686052787126272
     * }
     */
    public static long OPCODE_BAND() {
        return OPCODE_BAND;
    }
    private static final long OPCODE_BOR = 4611686057082093568L;
    /**
     * {@snippet lang=c :
     * #define OPCODE_BOR 4611686057082093568
     * }
     */
    public static long OPCODE_BOR() {
        return OPCODE_BOR;
    }
    private static final long OPCODE_BNOT = 4611686087146864640L;
    /**
     * {@snippet lang=c :
     * #define OPCODE_BNOT 4611686087146864640
     * }
     */
    public static long OPCODE_BNOT() {
        return OPCODE_BNOT;
    }
    private static final long OPCODE_BXOR = 4611686091441831936L;
    /**
     * {@snippet lang=c :
     * #define OPCODE_BXOR 4611686091441831936
     * }
     */
    public static long OPCODE_BXOR() {
        return OPCODE_BXOR;
    }
    private static final long OPCODE_LSHIFT = 4611686095736799232L;
    /**
     * {@snippet lang=c :
     * #define OPCODE_LSHIFT 4611686095736799232
     * }
     */
    public static long OPCODE_LSHIFT() {
        return OPCODE_LSHIFT;
    }
    private static final long OPCODE_RSHIFT = 4611686100031766528L;
    /**
     * {@snippet lang=c :
     * #define OPCODE_RSHIFT 4611686100031766528
     * }
     */
    public static long OPCODE_RSHIFT() {
        return OPCODE_RSHIFT;
    }
    private static final long OPCODE_ALLOW_ALIASES = 4611686104326733824L;
    /**
     * {@snippet lang=c :
     * #define OPCODE_ALLOW_ALIASES 4611686104326733824
     * }
     */
    public static long OPCODE_ALLOW_ALIASES() {
        return OPCODE_ALLOW_ALIASES;
    }
    private static final long OPCODE_ALLOW_TOKENS = 4611686108621701120L;
    /**
     * {@snippet lang=c :
     * #define OPCODE_ALLOW_TOKENS 4611686108621701120
     * }
     */
    public static long OPCODE_ALLOW_TOKENS() {
        return OPCODE_ALLOW_TOKENS;
    }
    private static final long OPCODE_ISCODE = 4611687117939015680L;
    /**
     * {@snippet lang=c :
     * #define OPCODE_ISCODE 4611687117939015680
     * }
     */
    public static long OPCODE_ISCODE() {
        return OPCODE_ISCODE;
    }
    private static final long OPCODE_ISSETCARD = 4611687122233982976L;
    /**
     * {@snippet lang=c :
     * #define OPCODE_ISSETCARD 4611687122233982976
     * }
     */
    public static long OPCODE_ISSETCARD() {
        return OPCODE_ISSETCARD;
    }
    private static final long OPCODE_ISTYPE = 4611687126528950272L;
    /**
     * {@snippet lang=c :
     * #define OPCODE_ISTYPE 4611687126528950272
     * }
     */
    public static long OPCODE_ISTYPE() {
        return OPCODE_ISTYPE;
    }
    private static final long OPCODE_ISRACE = 4611687130823917568L;
    /**
     * {@snippet lang=c :
     * #define OPCODE_ISRACE 4611687130823917568
     * }
     */
    public static long OPCODE_ISRACE() {
        return OPCODE_ISRACE;
    }
    private static final long OPCODE_ISATTRIBUTE = 4611687135118884864L;
    /**
     * {@snippet lang=c :
     * #define OPCODE_ISATTRIBUTE 4611687135118884864
     * }
     */
    public static long OPCODE_ISATTRIBUTE() {
        return OPCODE_ISATTRIBUTE;
    }
    private static final long OPCODE_GETCODE = 4611687139413852160L;
    /**
     * {@snippet lang=c :
     * #define OPCODE_GETCODE 4611687139413852160
     * }
     */
    public static long OPCODE_GETCODE() {
        return OPCODE_GETCODE;
    }
    private static final long OPCODE_GETSETCARD = 4611687143708819456L;
    /**
     * {@snippet lang=c :
     * #define OPCODE_GETSETCARD 4611687143708819456
     * }
     */
    public static long OPCODE_GETSETCARD() {
        return OPCODE_GETSETCARD;
    }
    private static final long OPCODE_GETTYPE = 4611687148003786752L;
    /**
     * {@snippet lang=c :
     * #define OPCODE_GETTYPE 4611687148003786752
     * }
     */
    public static long OPCODE_GETTYPE() {
        return OPCODE_GETTYPE;
    }
    private static final long OPCODE_GETRACE = 4611687152298754048L;
    /**
     * {@snippet lang=c :
     * #define OPCODE_GETRACE 4611687152298754048
     * }
     */
    public static long OPCODE_GETRACE() {
        return OPCODE_GETRACE;
    }
    private static final long OPCODE_GETATTRIBUTE = 4611687156593721344L;
    /**
     * {@snippet lang=c :
     * #define OPCODE_GETATTRIBUTE 4611687156593721344
     * }
     */
    public static long OPCODE_GETATTRIBUTE() {
        return OPCODE_GETATTRIBUTE;
    }
    private static final int DUEL_CAN_REPOS_IF_NON_SUMPLAYER = (int)2147483648L;
    /**
     * {@snippet lang=c :
     * #define DUEL_CAN_REPOS_IF_NON_SUMPLAYER 2147483648
     * }
     */
    public static int DUEL_CAN_REPOS_IF_NON_SUMPLAYER() {
        return DUEL_CAN_REPOS_IF_NON_SUMPLAYER;
    }
    private static final long DUEL_TCG_SEGOC_NONPUBLIC = 4294967296L;
    /**
     * {@snippet lang=c :
     * #define DUEL_TCG_SEGOC_NONPUBLIC 4294967296
     * }
     */
    public static long DUEL_TCG_SEGOC_NONPUBLIC() {
        return DUEL_TCG_SEGOC_NONPUBLIC;
    }
    private static final long DUEL_TCG_SEGOC_FIRSTTRIGGER = 8589934592L;
    /**
     * {@snippet lang=c :
     * #define DUEL_TCG_SEGOC_FIRSTTRIGGER 8589934592
     * }
     */
    public static long DUEL_TCG_SEGOC_FIRSTTRIGGER() {
        return DUEL_TCG_SEGOC_FIRSTTRIGGER;
    }
    private static final long DUEL_TCG_FAST_EFFECT_IGNITION = 17179869184L;
    /**
     * {@snippet lang=c :
     * #define DUEL_TCG_FAST_EFFECT_IGNITION 17179869184
     * }
     */
    public static long DUEL_TCG_FAST_EFFECT_IGNITION() {
        return DUEL_TCG_FAST_EFFECT_IGNITION;
    }
    private static final long DUEL_EXTRA_DECK_RITUAL = 34359738368L;
    /**
     * {@snippet lang=c :
     * #define DUEL_EXTRA_DECK_RITUAL 34359738368
     * }
     */
    public static long DUEL_EXTRA_DECK_RITUAL() {
        return DUEL_EXTRA_DECK_RITUAL;
    }
    private static final long DUEL_NORMAL_SUMMON_FACEUP_DEF = 68719476736L;
    /**
     * {@snippet lang=c :
     * #define DUEL_NORMAL_SUMMON_FACEUP_DEF 68719476736
     * }
     */
    public static long DUEL_NORMAL_SUMMON_FACEUP_DEF() {
        return DUEL_NORMAL_SUMMON_FACEUP_DEF;
    }
    private static final int DUEL_MODE_SPEED = (int)6455296L;
    /**
     * {@snippet lang=c :
     * #define DUEL_MODE_SPEED 6455296
     * }
     */
    public static int DUEL_MODE_SPEED() {
        return DUEL_MODE_SPEED;
    }
    private static final long DUEL_MODE_RUSH = 34493071872L;
    /**
     * {@snippet lang=c :
     * #define DUEL_MODE_RUSH 34493071872
     * }
     */
    public static long DUEL_MODE_RUSH() {
        return DUEL_MODE_RUSH;
    }
    private static final int DUEL_MODE_MR1 = (int)853760L;
    /**
     * {@snippet lang=c :
     * #define DUEL_MODE_MR1 853760
     * }
     */
    public static int DUEL_MODE_MR1() {
        return DUEL_MODE_MR1;
    }
    private static final long DUEL_MODE_GOAT = 34226374444L;
    /**
     * {@snippet lang=c :
     * #define DUEL_MODE_GOAT 34226374444
     * }
     */
    public static long DUEL_MODE_GOAT() {
        return DUEL_MODE_GOAT;
    }
    private static final int DUEL_MODE_MR2 = (int)853504L;
    /**
     * {@snippet lang=c :
     * #define DUEL_MODE_MR2 853504
     * }
     */
    public static int DUEL_MODE_MR2() {
        return DUEL_MODE_MR2;
    }
    private static final int DUEL_MODE_MR3 = (int)858112L;
    /**
     * {@snippet lang=c :
     * #define DUEL_MODE_MR3 858112
     * }
     */
    public static int DUEL_MODE_MR3() {
        return DUEL_MODE_MR3;
    }
    private static final int DUEL_MODE_MR4 = (int)862208L;
    /**
     * {@snippet lang=c :
     * #define DUEL_MODE_MR4 862208
     * }
     */
    public static int DUEL_MODE_MR4() {
        return DUEL_MODE_MR4;
    }
    private static final int DUEL_MODE_MR5 = (int)190464L;
    /**
     * {@snippet lang=c :
     * #define DUEL_MODE_MR5 190464
     * }
     */
    public static int DUEL_MODE_MR5() {
        return DUEL_MODE_MR5;
    }
    private static final int DUEL_MODE_MR1_FORB = (int)92274688L;
    /**
     * {@snippet lang=c :
     * #define DUEL_MODE_MR1_FORB 92274688
     * }
     */
    public static int DUEL_MODE_MR1_FORB() {
        return DUEL_MODE_MR1_FORB;
    }
    private static final int DUEL_MODE_MR2_FORB = (int)83886080L;
    /**
     * {@snippet lang=c :
     * #define DUEL_MODE_MR2_FORB 83886080
     * }
     */
    public static int DUEL_MODE_MR2_FORB() {
        return DUEL_MODE_MR2_FORB;
    }
    private static final int DUEL_MODE_MR3_FORB = (int)67108864L;
    /**
     * {@snippet lang=c :
     * #define DUEL_MODE_MR3_FORB 67108864
     * }
     */
    public static int DUEL_MODE_MR3_FORB() {
        return DUEL_MODE_MR3_FORB;
    }
}

