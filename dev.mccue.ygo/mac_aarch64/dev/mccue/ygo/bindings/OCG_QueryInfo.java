// Generated by jextract

package dev.mccue.ygo.bindings;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct OCG_QueryInfo {
 *     uint32_t flags;
 *     uint8_t con;
 *     uint32_t loc;
 *     uint32_t seq;
 *     uint32_t overlay_seq;
 * }
 * }
 */
public class OCG_QueryInfo {

    OCG_QueryInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        yugioh_h.C_INT.withName("flags"),
        yugioh_h.C_CHAR.withName("con"),
        MemoryLayout.paddingLayout(3),
        yugioh_h.C_INT.withName("loc"),
        yugioh_h.C_INT.withName("seq"),
        yugioh_h.C_INT.withName("overlay_seq")
    ).withName("OCG_QueryInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final OfByte con$LAYOUT = (OfByte)$LAYOUT.select(groupElement("con"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t con
     * }
     */
    public static final OfByte con$layout() {
        return con$LAYOUT;
    }

    private static final long con$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t con
     * }
     */
    public static final long con$offset() {
        return con$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t con
     * }
     */
    public static byte con(MemorySegment struct) {
        return struct.get(con$LAYOUT, con$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t con
     * }
     */
    public static void con(MemorySegment struct, byte fieldValue) {
        struct.set(con$LAYOUT, con$OFFSET, fieldValue);
    }

    private static final OfInt loc$LAYOUT = (OfInt)$LAYOUT.select(groupElement("loc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t loc
     * }
     */
    public static final OfInt loc$layout() {
        return loc$LAYOUT;
    }

    private static final long loc$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t loc
     * }
     */
    public static final long loc$offset() {
        return loc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t loc
     * }
     */
    public static int loc(MemorySegment struct) {
        return struct.get(loc$LAYOUT, loc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t loc
     * }
     */
    public static void loc(MemorySegment struct, int fieldValue) {
        struct.set(loc$LAYOUT, loc$OFFSET, fieldValue);
    }

    private static final OfInt seq$LAYOUT = (OfInt)$LAYOUT.select(groupElement("seq"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t seq
     * }
     */
    public static final OfInt seq$layout() {
        return seq$LAYOUT;
    }

    private static final long seq$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t seq
     * }
     */
    public static final long seq$offset() {
        return seq$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t seq
     * }
     */
    public static int seq(MemorySegment struct) {
        return struct.get(seq$LAYOUT, seq$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t seq
     * }
     */
    public static void seq(MemorySegment struct, int fieldValue) {
        struct.set(seq$LAYOUT, seq$OFFSET, fieldValue);
    }

    private static final OfInt overlay_seq$LAYOUT = (OfInt)$LAYOUT.select(groupElement("overlay_seq"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t overlay_seq
     * }
     */
    public static final OfInt overlay_seq$layout() {
        return overlay_seq$LAYOUT;
    }

    private static final long overlay_seq$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t overlay_seq
     * }
     */
    public static final long overlay_seq$offset() {
        return overlay_seq$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t overlay_seq
     * }
     */
    public static int overlay_seq(MemorySegment struct) {
        return struct.get(overlay_seq$LAYOUT, overlay_seq$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t overlay_seq
     * }
     */
    public static void overlay_seq(MemorySegment struct, int fieldValue) {
        struct.set(overlay_seq$LAYOUT, overlay_seq$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

