// Generated by jextract

package dev.mccue.ygo.bindings;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct OCG_DuelOptions {
 *     uint64_t seed[4];
 *     uint64_t flags;
 *     OCG_Player team1;
 *     OCG_Player team2;
 *     OCG_DataReader cardReader;
 *     void *payload1;
 *     OCG_ScriptReader scriptReader;
 *     void *payload2;
 *     OCG_LogHandler logHandler;
 *     void *payload3;
 *     OCG_DataReaderDone cardReaderDone;
 *     void *payload4;
 *     uint8_t enableUnsafeLibraries;
 * }
 * }
 */
public class OCG_DuelOptions {

    OCG_DuelOptions() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(4, yugioh_h.C_LONG_LONG).withName("seed"),
        yugioh_h.C_LONG_LONG.withName("flags"),
        OCG_Player.layout().withName("team1"),
        OCG_Player.layout().withName("team2"),
        yugioh_h.C_POINTER.withName("cardReader"),
        yugioh_h.C_POINTER.withName("payload1"),
        yugioh_h.C_POINTER.withName("scriptReader"),
        yugioh_h.C_POINTER.withName("payload2"),
        yugioh_h.C_POINTER.withName("logHandler"),
        yugioh_h.C_POINTER.withName("payload3"),
        yugioh_h.C_POINTER.withName("cardReaderDone"),
        yugioh_h.C_POINTER.withName("payload4"),
        yugioh_h.C_CHAR.withName("enableUnsafeLibraries"),
        MemoryLayout.paddingLayout(7)
    ).withName("OCG_DuelOptions");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout seed$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("seed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t seed[4]
     * }
     */
    public static final SequenceLayout seed$layout() {
        return seed$LAYOUT;
    }

    private static final long seed$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t seed[4]
     * }
     */
    public static final long seed$offset() {
        return seed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t seed[4]
     * }
     */
    public static MemorySegment seed(MemorySegment struct) {
        return struct.asSlice(seed$OFFSET, seed$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t seed[4]
     * }
     */
    public static void seed(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, seed$OFFSET, seed$LAYOUT.byteSize());
    }

    private static long[] seed$DIMS = { 4 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint64_t seed[4]
     * }
     */
    public static long[] seed$dimensions() {
        return seed$DIMS;
    }
    private static final VarHandle seed$ELEM_HANDLE = seed$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint64_t seed[4]
     * }
     */
    public static long seed(MemorySegment struct, long index0) {
        return (long)seed$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint64_t seed[4]
     * }
     */
    public static void seed(MemorySegment struct, long index0, long fieldValue) {
        seed$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfLong flags$LAYOUT = (OfLong)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t flags
     * }
     */
    public static final OfLong flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t flags
     * }
     */
    public static long flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t flags
     * }
     */
    public static void flags(MemorySegment struct, long fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final GroupLayout team1$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("team1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OCG_Player team1
     * }
     */
    public static final GroupLayout team1$layout() {
        return team1$LAYOUT;
    }

    private static final long team1$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OCG_Player team1
     * }
     */
    public static final long team1$offset() {
        return team1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OCG_Player team1
     * }
     */
    public static MemorySegment team1(MemorySegment struct) {
        return struct.asSlice(team1$OFFSET, team1$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OCG_Player team1
     * }
     */
    public static void team1(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, team1$OFFSET, team1$LAYOUT.byteSize());
    }

    private static final GroupLayout team2$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("team2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OCG_Player team2
     * }
     */
    public static final GroupLayout team2$layout() {
        return team2$LAYOUT;
    }

    private static final long team2$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OCG_Player team2
     * }
     */
    public static final long team2$offset() {
        return team2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OCG_Player team2
     * }
     */
    public static MemorySegment team2(MemorySegment struct) {
        return struct.asSlice(team2$OFFSET, team2$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OCG_Player team2
     * }
     */
    public static void team2(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, team2$OFFSET, team2$LAYOUT.byteSize());
    }

    private static final AddressLayout cardReader$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("cardReader"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OCG_DataReader cardReader
     * }
     */
    public static final AddressLayout cardReader$layout() {
        return cardReader$LAYOUT;
    }

    private static final long cardReader$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OCG_DataReader cardReader
     * }
     */
    public static final long cardReader$offset() {
        return cardReader$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OCG_DataReader cardReader
     * }
     */
    public static MemorySegment cardReader(MemorySegment struct) {
        return struct.get(cardReader$LAYOUT, cardReader$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OCG_DataReader cardReader
     * }
     */
    public static void cardReader(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(cardReader$LAYOUT, cardReader$OFFSET, fieldValue);
    }

    private static final AddressLayout payload1$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("payload1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *payload1
     * }
     */
    public static final AddressLayout payload1$layout() {
        return payload1$LAYOUT;
    }

    private static final long payload1$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *payload1
     * }
     */
    public static final long payload1$offset() {
        return payload1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *payload1
     * }
     */
    public static MemorySegment payload1(MemorySegment struct) {
        return struct.get(payload1$LAYOUT, payload1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *payload1
     * }
     */
    public static void payload1(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(payload1$LAYOUT, payload1$OFFSET, fieldValue);
    }

    private static final AddressLayout scriptReader$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("scriptReader"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OCG_ScriptReader scriptReader
     * }
     */
    public static final AddressLayout scriptReader$layout() {
        return scriptReader$LAYOUT;
    }

    private static final long scriptReader$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OCG_ScriptReader scriptReader
     * }
     */
    public static final long scriptReader$offset() {
        return scriptReader$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OCG_ScriptReader scriptReader
     * }
     */
    public static MemorySegment scriptReader(MemorySegment struct) {
        return struct.get(scriptReader$LAYOUT, scriptReader$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OCG_ScriptReader scriptReader
     * }
     */
    public static void scriptReader(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(scriptReader$LAYOUT, scriptReader$OFFSET, fieldValue);
    }

    private static final AddressLayout payload2$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("payload2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *payload2
     * }
     */
    public static final AddressLayout payload2$layout() {
        return payload2$LAYOUT;
    }

    private static final long payload2$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *payload2
     * }
     */
    public static final long payload2$offset() {
        return payload2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *payload2
     * }
     */
    public static MemorySegment payload2(MemorySegment struct) {
        return struct.get(payload2$LAYOUT, payload2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *payload2
     * }
     */
    public static void payload2(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(payload2$LAYOUT, payload2$OFFSET, fieldValue);
    }

    private static final AddressLayout logHandler$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("logHandler"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OCG_LogHandler logHandler
     * }
     */
    public static final AddressLayout logHandler$layout() {
        return logHandler$LAYOUT;
    }

    private static final long logHandler$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OCG_LogHandler logHandler
     * }
     */
    public static final long logHandler$offset() {
        return logHandler$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OCG_LogHandler logHandler
     * }
     */
    public static MemorySegment logHandler(MemorySegment struct) {
        return struct.get(logHandler$LAYOUT, logHandler$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OCG_LogHandler logHandler
     * }
     */
    public static void logHandler(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(logHandler$LAYOUT, logHandler$OFFSET, fieldValue);
    }

    private static final AddressLayout payload3$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("payload3"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *payload3
     * }
     */
    public static final AddressLayout payload3$layout() {
        return payload3$LAYOUT;
    }

    private static final long payload3$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *payload3
     * }
     */
    public static final long payload3$offset() {
        return payload3$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *payload3
     * }
     */
    public static MemorySegment payload3(MemorySegment struct) {
        return struct.get(payload3$LAYOUT, payload3$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *payload3
     * }
     */
    public static void payload3(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(payload3$LAYOUT, payload3$OFFSET, fieldValue);
    }

    private static final AddressLayout cardReaderDone$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("cardReaderDone"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OCG_DataReaderDone cardReaderDone
     * }
     */
    public static final AddressLayout cardReaderDone$layout() {
        return cardReaderDone$LAYOUT;
    }

    private static final long cardReaderDone$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OCG_DataReaderDone cardReaderDone
     * }
     */
    public static final long cardReaderDone$offset() {
        return cardReaderDone$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OCG_DataReaderDone cardReaderDone
     * }
     */
    public static MemorySegment cardReaderDone(MemorySegment struct) {
        return struct.get(cardReaderDone$LAYOUT, cardReaderDone$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OCG_DataReaderDone cardReaderDone
     * }
     */
    public static void cardReaderDone(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(cardReaderDone$LAYOUT, cardReaderDone$OFFSET, fieldValue);
    }

    private static final AddressLayout payload4$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("payload4"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *payload4
     * }
     */
    public static final AddressLayout payload4$layout() {
        return payload4$LAYOUT;
    }

    private static final long payload4$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *payload4
     * }
     */
    public static final long payload4$offset() {
        return payload4$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *payload4
     * }
     */
    public static MemorySegment payload4(MemorySegment struct) {
        return struct.get(payload4$LAYOUT, payload4$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *payload4
     * }
     */
    public static void payload4(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(payload4$LAYOUT, payload4$OFFSET, fieldValue);
    }

    private static final OfByte enableUnsafeLibraries$LAYOUT = (OfByte)$LAYOUT.select(groupElement("enableUnsafeLibraries"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t enableUnsafeLibraries
     * }
     */
    public static final OfByte enableUnsafeLibraries$layout() {
        return enableUnsafeLibraries$LAYOUT;
    }

    private static final long enableUnsafeLibraries$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t enableUnsafeLibraries
     * }
     */
    public static final long enableUnsafeLibraries$offset() {
        return enableUnsafeLibraries$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t enableUnsafeLibraries
     * }
     */
    public static byte enableUnsafeLibraries(MemorySegment struct) {
        return struct.get(enableUnsafeLibraries$LAYOUT, enableUnsafeLibraries$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t enableUnsafeLibraries
     * }
     */
    public static void enableUnsafeLibraries(MemorySegment struct, byte fieldValue) {
        struct.set(enableUnsafeLibraries$LAYOUT, enableUnsafeLibraries$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

