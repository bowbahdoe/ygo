// Generated by jextract

package dev.mccue.ygo.bindings;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct OCG_CardData {
 *     uint32_t code;
 *     uint32_t alias;
 *     uint16_t *setcodes;
 *     uint32_t type;
 *     uint32_t level;
 *     uint32_t attribute;
 *     uint64_t race;
 *     int32_t attack;
 *     int32_t defense;
 *     uint32_t lscale;
 *     uint32_t rscale;
 *     uint32_t linkMarker;
 * }
 * }
 */
public class OCG_CardData {

    OCG_CardData() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        yugioh_h.C_INT.withName("code"),
        yugioh_h.C_INT.withName("alias"),
        yugioh_h.C_POINTER.withName("setcodes"),
        yugioh_h.C_INT.withName("type"),
        yugioh_h.C_INT.withName("level"),
        yugioh_h.C_INT.withName("attribute"),
        MemoryLayout.paddingLayout(4),
        yugioh_h.C_LONG_LONG.withName("race"),
        yugioh_h.C_INT.withName("attack"),
        yugioh_h.C_INT.withName("defense"),
        yugioh_h.C_INT.withName("lscale"),
        yugioh_h.C_INT.withName("rscale"),
        yugioh_h.C_INT.withName("linkMarker"),
        MemoryLayout.paddingLayout(4)
    ).withName("OCG_CardData");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt code$LAYOUT = (OfInt)$LAYOUT.select(groupElement("code"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t code
     * }
     */
    public static final OfInt code$layout() {
        return code$LAYOUT;
    }

    private static final long code$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t code
     * }
     */
    public static final long code$offset() {
        return code$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t code
     * }
     */
    public static int code(MemorySegment struct) {
        return struct.get(code$LAYOUT, code$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t code
     * }
     */
    public static void code(MemorySegment struct, int fieldValue) {
        struct.set(code$LAYOUT, code$OFFSET, fieldValue);
    }

    private static final OfInt alias$LAYOUT = (OfInt)$LAYOUT.select(groupElement("alias"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t alias
     * }
     */
    public static final OfInt alias$layout() {
        return alias$LAYOUT;
    }

    private static final long alias$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t alias
     * }
     */
    public static final long alias$offset() {
        return alias$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t alias
     * }
     */
    public static int alias(MemorySegment struct) {
        return struct.get(alias$LAYOUT, alias$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t alias
     * }
     */
    public static void alias(MemorySegment struct, int fieldValue) {
        struct.set(alias$LAYOUT, alias$OFFSET, fieldValue);
    }

    private static final AddressLayout setcodes$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("setcodes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t *setcodes
     * }
     */
    public static final AddressLayout setcodes$layout() {
        return setcodes$LAYOUT;
    }

    private static final long setcodes$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t *setcodes
     * }
     */
    public static final long setcodes$offset() {
        return setcodes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t *setcodes
     * }
     */
    public static MemorySegment setcodes(MemorySegment struct) {
        return struct.get(setcodes$LAYOUT, setcodes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t *setcodes
     * }
     */
    public static void setcodes(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(setcodes$LAYOUT, setcodes$OFFSET, fieldValue);
    }

    private static final OfInt type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t type
     * }
     */
    public static final OfInt type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t type
     * }
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t type
     * }
     */
    public static int type(MemorySegment struct) {
        return struct.get(type$LAYOUT, type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t type
     * }
     */
    public static void type(MemorySegment struct, int fieldValue) {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    private static final OfInt level$LAYOUT = (OfInt)$LAYOUT.select(groupElement("level"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t level
     * }
     */
    public static final OfInt level$layout() {
        return level$LAYOUT;
    }

    private static final long level$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t level
     * }
     */
    public static final long level$offset() {
        return level$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t level
     * }
     */
    public static int level(MemorySegment struct) {
        return struct.get(level$LAYOUT, level$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t level
     * }
     */
    public static void level(MemorySegment struct, int fieldValue) {
        struct.set(level$LAYOUT, level$OFFSET, fieldValue);
    }

    private static final OfInt attribute$LAYOUT = (OfInt)$LAYOUT.select(groupElement("attribute"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t attribute
     * }
     */
    public static final OfInt attribute$layout() {
        return attribute$LAYOUT;
    }

    private static final long attribute$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t attribute
     * }
     */
    public static final long attribute$offset() {
        return attribute$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t attribute
     * }
     */
    public static int attribute(MemorySegment struct) {
        return struct.get(attribute$LAYOUT, attribute$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t attribute
     * }
     */
    public static void attribute(MemorySegment struct, int fieldValue) {
        struct.set(attribute$LAYOUT, attribute$OFFSET, fieldValue);
    }

    private static final OfLong race$LAYOUT = (OfLong)$LAYOUT.select(groupElement("race"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t race
     * }
     */
    public static final OfLong race$layout() {
        return race$LAYOUT;
    }

    private static final long race$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t race
     * }
     */
    public static final long race$offset() {
        return race$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t race
     * }
     */
    public static long race(MemorySegment struct) {
        return struct.get(race$LAYOUT, race$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t race
     * }
     */
    public static void race(MemorySegment struct, long fieldValue) {
        struct.set(race$LAYOUT, race$OFFSET, fieldValue);
    }

    private static final OfInt attack$LAYOUT = (OfInt)$LAYOUT.select(groupElement("attack"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t attack
     * }
     */
    public static final OfInt attack$layout() {
        return attack$LAYOUT;
    }

    private static final long attack$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t attack
     * }
     */
    public static final long attack$offset() {
        return attack$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t attack
     * }
     */
    public static int attack(MemorySegment struct) {
        return struct.get(attack$LAYOUT, attack$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t attack
     * }
     */
    public static void attack(MemorySegment struct, int fieldValue) {
        struct.set(attack$LAYOUT, attack$OFFSET, fieldValue);
    }

    private static final OfInt defense$LAYOUT = (OfInt)$LAYOUT.select(groupElement("defense"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t defense
     * }
     */
    public static final OfInt defense$layout() {
        return defense$LAYOUT;
    }

    private static final long defense$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t defense
     * }
     */
    public static final long defense$offset() {
        return defense$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t defense
     * }
     */
    public static int defense(MemorySegment struct) {
        return struct.get(defense$LAYOUT, defense$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t defense
     * }
     */
    public static void defense(MemorySegment struct, int fieldValue) {
        struct.set(defense$LAYOUT, defense$OFFSET, fieldValue);
    }

    private static final OfInt lscale$LAYOUT = (OfInt)$LAYOUT.select(groupElement("lscale"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t lscale
     * }
     */
    public static final OfInt lscale$layout() {
        return lscale$LAYOUT;
    }

    private static final long lscale$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t lscale
     * }
     */
    public static final long lscale$offset() {
        return lscale$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t lscale
     * }
     */
    public static int lscale(MemorySegment struct) {
        return struct.get(lscale$LAYOUT, lscale$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t lscale
     * }
     */
    public static void lscale(MemorySegment struct, int fieldValue) {
        struct.set(lscale$LAYOUT, lscale$OFFSET, fieldValue);
    }

    private static final OfInt rscale$LAYOUT = (OfInt)$LAYOUT.select(groupElement("rscale"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t rscale
     * }
     */
    public static final OfInt rscale$layout() {
        return rscale$LAYOUT;
    }

    private static final long rscale$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t rscale
     * }
     */
    public static final long rscale$offset() {
        return rscale$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t rscale
     * }
     */
    public static int rscale(MemorySegment struct) {
        return struct.get(rscale$LAYOUT, rscale$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t rscale
     * }
     */
    public static void rscale(MemorySegment struct, int fieldValue) {
        struct.set(rscale$LAYOUT, rscale$OFFSET, fieldValue);
    }

    private static final OfInt link_marker$LAYOUT = (OfInt)$LAYOUT.select(groupElement("linkMarker"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t linkMarker
     * }
     */
    public static final OfInt link_marker$layout() {
        return link_marker$LAYOUT;
    }

    private static final long link_marker$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t linkMarker
     * }
     */
    public static final long link_marker$offset() {
        return link_marker$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t linkMarker
     * }
     */
    public static int link_marker(MemorySegment struct) {
        return struct.get(link_marker$LAYOUT, link_marker$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t linkMarker
     * }
     */
    public static void link_marker(MemorySegment struct, int fieldValue) {
        struct.set(link_marker$LAYOUT, link_marker$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

